--- a/node_modules/react-joyride/dist/index.mjs
+++ b/node_modules/react-joyride/dist/index.mjs
@@ -1,6 +1,6 @@
-import ReactDOM from 'react-dom';
 import React, { useLayoutEffect, useState, forwardRef, useEffect, useRef, useCallback } from 'react';
 import { Popper } from 'react-popper';
+import { createRoot } from 'react-dom/client';
 import { computePortal, deepmerge, getClientRect, getDocument, getWindow, isElement, isFixed, isFunction, isObject, isReactElement, isString, log, scroll, setScope, shouldScroll, step, store, stylis } from '@react-joyride/core';
 import { RemoveScroll } from 'react-remove-scroll';
 import { FocusOn } from 'react-focus-on';
@@ -23,21 +23,17 @@
 
 function Beacon(props) {
     const { beaconComponent, step: step$1, continuous, controlled, index, locale, next, prev, size, skip, status, type } = props;
-    const [element, setElement] = useState(null);
     const target = usePortal('joyride-beacon', step$1.target);
     useLayoutEffect(() => {
-        if (target) {
-            setElement(createPortal(target, beaconComponent, { beacon, continuous, controlled, index, locale, next, prev, size, skip, status, step: step$1, type }));
-            return () => {
-                ReactDOM.unmountComponentAtNode(target);
-            };
+        if (!target) {
+            return;
         }
-    }, [target]);
-    useLayoutEffect(() => {
-        if (element) {
-            ReactDOM.render(element, target);
-        }
-    }, [element, target]);
+        const root = createRoot(target);
+        const element = createPortal(target, beaconComponent, { beacon, continuous, controlled, index, locale, next, prev, size, skip, status, step: step$1, type });
+        root.render(element);
+        return () => {
+            root.unmount();
+        };
+    }, [target, beaconComponent, continuous, controlled, index, locale, next, prev, size, skip, status, step$1, type]);
     return null;
 }
 
