
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to reduce repetition
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(docData) {
      return isAuthenticated() && request.auth.uid in docData.participantIds;
    }
    
    function isRecipient() {
        return isAuthenticated() && request.auth.uid == resource.data.toId;
    }
    
    function isCurrentPlayer(docData) {
        return isAuthenticated() && request.auth.uid == docData.currentPlayerId;
    }
    
    function isPoster() {
        return isAuthenticated() && request.auth.uid == resource.data.posterId;
    }

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUser(userId);
    }
    
    // Friend Requests can be read by the recipient and created by anyone.
    // They can only be deleted by the sender or recipient.
    match /friendRequests/{requestId} {
      allow list: if isAuthenticated(); // For useNotifications hook
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Matches can be created by participants, and read by participants.
    match /matches/{matchId} {
      allow list: if isAuthenticated();
      allow read, create: if isParticipant(request.resource.data);
      allow update: if isParticipant(resource.data);
    }
    
    // Challenges can be created by auth'd users.
    // They can be read/updated by participants.
    match /challenges/{challengeId} {
      allow list: if isAuthenticated();
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
    }
    
    // Open challenges can be read by anyone, but only created/deleted by the poster.
    match /openChallenges/{challengeId} {
        allow read, list: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.posterId;
        allow delete: if isPoster();
    }
    
    // Tournaments can be read/updated by participants.
    match /tournaments/{tournamentId} {
        allow read, update: if isParticipant(resource.data);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.organizerId;
    }

    // Chats and messages can be read/written by participants.
    match /chats/{chatId} {
      allow list: if isParticipant(resource.data);
      allow read, update: if isParticipant(resource.data);
      allow create: if isParticipant(request.resource.data);

      match /messages/{messageId} {
        allow read, create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data);
      }
    }
    
    // Games can be read/written by participants.
    match /rallyGames/{gameId} {
      allow list: if isCurrentPlayer(resource.data);
      allow read, update: if isParticipant(resource.data);
      allow create: if isParticipant(request.resource.data);
      allow delete: if isParticipant(resource.data);
    }
    
    match /legendGames/{gameId} {
      allow list: if isCurrentPlayer(resource.data);
      allow read, update: if isParticipant(resource.data);
      allow create: if isParticipant(request.resource.data);
      allow delete: if isParticipant(resource.data);
    }
    
    // Practice sessions are private to the user.
    match /practiceSessions/{sessionId} {
        allow list, read, create: if isUser(resource.data.userId);
    }

    // Reports can only be created by authenticated users.
    match /reports/{reportId} {
        allow create: if isAuthenticated();
    }
  }
}
