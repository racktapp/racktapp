rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users can read any public profile, but only write to their own.
    // They can only update specific, non-critical fields.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUser(userId) && request.resource.data.uid == userId;
      allow update: if isUser(userId) && request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl', 'friendIds', 'sports']);
      allow delete: if isUser(userId);
    }
    
    // Any authenticated user can list users for leaderboards/search
    match /users/{document=**} {
      allow list: if isAuthenticated();
    }

    // Matches: Only participants can read or write.
    match /matches/{matchId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }
    
    match /matches/{document=**} {
       allow list: if isAuthenticated();
    }

    // Challenges: Can be read by sender or receiver. Only receiver can update.
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.toId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.fromId;
    }
    
    match /challenges/{document=**} {
       allow list: if isAuthenticated();
    }

    // Open Challenges: Anyone authenticated can read. Only poster can delete.
    match /openChallenges/{challengeId} {
      allow read, create: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }

    // Friend Requests: Can be accessed by sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
    }
    
    match /friendRequests/{document=**} {
       allow list: if isAuthenticated();
    }

    // Chats & Messages: Only participants can access.
    match /chats/{chatId} {
      allow list, get: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // Games: Only participants can access.
    match /rallyGames/{gameId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /rallyGames/{document=**} {
       allow list: if isAuthenticated();
    }
    
    match /legendGames/{gameId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{document=**} {
       allow list: if isAuthenticated();
    }

    // Tournaments: Readable by all, writable only by organizer.
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }
    
    match /tournaments/{document=**} {
       allow list: if isAuthenticated();
    }

    // Practice Sessions: Users can only manage their own sessions.
    match /practiceSessions/{sessionId} {
      allow read, create, update, delete: if isUser(resource.data.userId);
    }
    
    match /practiceSessions/{document=**} {
       allow list: if isAuthenticated();
    }

    // Reports: Any authenticated user can create a report.
    match /reports/{reportId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reporterId;
    }
  }
}
