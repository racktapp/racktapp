
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && !( 'username' in request.resource.data && request.resource.data.username != resource.data.username );
    }

    // FRIEND REQUESTS collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
      allow delete: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    // CHALLENGES collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && (request.auth.uid in resource.data.fromId || request.auth.uid in resource.data.toId);
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
      allow update: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    // OPEN CHALLENGES collection
    match /openChallenges/{challengeId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.posterId);
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }

    // MATCHES collection
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // TOURNAMENTS collection
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.organizerId);
      allow update: if isAuthenticated() && isOwner(resource.data.organizerId);
    }
    
    // CHATS and MESSAGES collections
    match /chats/{chatId} {
      allow read, create, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // GAMES collections
    match /rallyGames/{gameId} {
       allow read, create, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
       allow list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    match /legendGames/{gameId} {
       allow read, create, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
       allow list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    // PRACTICE SESSIONS collection
    match /practiceSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if false; 
    }
  }
}
