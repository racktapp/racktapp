
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(resource) {
      return isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // USER PROFILES
    // Anyone can read a user's public profile
    // Only the user themselves can write to their own document
    match /users/{userId} {
      allow read: if true;
      allow write: if isUser(userId);
    }

    // FRIEND REQUESTS
    // Only involved users can read a friend request
    // Only the sender can create one
    // Only the recipient can update it (implicitly by deleting on accept)
    // Involved users can delete (sender cancels, recipient declines)
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // CHALLENGES (Direct)
    // Only involved users can interact with a direct challenge
    match /challenges/{challengeId} {
        allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
    }
    
    // OPEN CHALLENGES
    // Any authenticated user can read open challenges
    // Any authenticated user can create one
    // Only the user who posted it can delete it
    match /openChallenges/{challengeId} {
        allow read, create: if isAuthenticated();
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }
    
    // MATCHES
    // Only participants can read a match document
    // Only participants can write (confirm/decline) to a match
    // Anyone can create a match as it's part of the reporting flow
    match /matches/{matchId} {
        allow read, update: if isParticipant(resource);
        allow create: if isAuthenticated();
    }
    
    // TOURNAMENTS
    // Only participants can read a tournament document
    // Only the organizer can update the tournament (e.g. report scores)
    // Any authenticated user can create a tournament
    match /tournaments/{tournamentId} {
        allow read: if isParticipant(resource);
        allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.organizerId;
    }

    // CHATS & MESSAGES
    // Rules for the 'chats' collection
    match /chats/{chatId} {
      allow read, write: if isParticipant(resource);
      
      // Rules for the 'messages' subcollection within a chat
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // GAMES
    // Only participants can interact with a game
    match /rallyGames/{gameId} {
      allow read, write: if isParticipant(resource);
    }
    match /legendGames/{gameId} {
      allow read, write: if isParticipant(resource);
    }

    // PRACTICE SESSIONS
    // Users can only read/write their own practice sessions
    match /practiceSessions/{sessionId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // REPORTS
    // Only allow users to create reports, not read/update/delete them.
    // Admin/moderator access would be handled by a backend process with elevated privileges.
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false; 
    }
  }
}
