
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get a user's document data.
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read;
      allow write: if isAuthenticated() && request.auth.uid == userId;

      // Allow reads on practiceSessions subcollection only by the owner.
      match /practiceSessions/{sessionId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Matches can be read by any participant.
    // Writes are handled by Cloud Functions for security (implicitly denied here).
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      // Allow creation/updates through specific server-side actions, but prevent direct client writes.
      allow write: if false; 
    }
    
    // Challenges can be read/written by the sender or receiver.
    match /challenges/{challengeId} {
      allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Open challenges can be read by any authenticated user.
    // Only the poster can create or delete their own open challenge.
    match /openChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.posterId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }
    
    // Friend requests can be read/written by the sender or receiver.
    match /friendRequests/{requestId} {
       allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Chats and their sub-collections can be accessed only by participants.
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    // Games (Rally & Legend) can be accessed only by participants.
    match /rallyGames/{gameId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Tournaments can be read by any participant.
    match /tournaments/{tournamentId} {
        allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        // Writes (e.g., reporting a winner) should be handled by a secure backend/function.
        allow write: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }
    
    // Reports can only be created by an authenticated user.
    // Reading/deleting reports should be restricted to admin roles (not implemented here).
    match /reports/{reportId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reporterId;
      allow read, update, delete: if false; // Only admins should access
    }
  }
}
