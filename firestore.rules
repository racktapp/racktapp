
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isParticipant(collectionName, docId) {
        return request.auth.uid in get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.participantIds;
    }

    // Users can read any public profile, but only write to their own.
    // Stats are updated server-side via transactions, not directly by the client.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId) && request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl', 'friendIds']);
    }

    // Matches can only be read by participants. Write access is handled by server-side logic (transactions).
    match /matches/{matchId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow list: if isSignedIn() && request.auth.uid in resource.data.participants;
    }
    
    // Challenges can only be read/written by participants.
    match /challenges/{challengeId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow write: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow list: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Open challenges can be read by anyone signed in, but only created/deleted by the owner.
    match /openChallenges/{challengeId} {
        allow read: if isSignedIn();
        allow create: if isUser(request.resource.data.posterId);
        allow delete: if isUser(get(path).data.posterId);
    }
    
    // Friend requests can only be accessed by the sender or receiver.
    match /friendRequests/{requestId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isUser(request.resource.data.fromId);
        allow delete: if isSignedIn() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
        allow list: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Chats and their subcollections
    match /chats/{chatId} {
      allow get: if isParticipant('chats', chatId);
      allow list: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      // Messages can only be read/written by participants of the parent chat.
      match /messages/{messageId} {
        allow read, write: if isParticipant('chats', chatId);
      }
    }
    
    // Game collections can only be accessed by participants.
    match /rallyGames/{gameId} {
        allow get: if isParticipant('rallyGames', gameId);
        allow list: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        allow update: if isParticipant('rallyGames', gameId);
    }
    
    match /legendGames/{gameId} {
        allow get: if isParticipant('legendGames', gameId);
        allow list: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        allow update: if isParticipant('legendGames', gameId);
    }
    
    // Tournaments can be read by any participant. Writes are handled server-side.
    match /tournaments/{tournamentId} {
        allow read: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    // Practice sessions are private to the user who created them.
    match /practiceSessions/{sessionId} {
      allow read, write, delete: if isUser(resource.data.userId);
      allow create: if isUser(request.resource.data.userId);
    }
    
    // Reports can be created by any signed-in user.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
    
  }
}
