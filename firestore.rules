
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users: Can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if isOwner(userId);
      // Deny create/delete through this path directly
      allow create, delete: if false;

      // Practice Sessions Subcollection: User can only manage their own.
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Reports: Users can create reports, but not read/update/delete them.
    match /reports/{reportId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false;
    }

    // Matches: Can be read by participants, but not written to directly.
    match /matches/{matchId} {
      allow read: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      allow list: if request.auth != null && request.query.where.participants.hasAny([request.auth.uid]);
      allow create, update, delete: if false; // Managed by server actions
    }

    // Challenges: Can only be managed by the sender or receiver.
    match /challenges/{challengeId} {
      allow read: if request.auth != null && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow list: if request.auth != null && (request.query.where.fromId == request.auth.uid || request.query.where.toId == request.auth.uid);
      allow create, update, delete: if isOwner(request.resource.data.fromId) || isOwner(resource.data.fromId);
    }
    
    // Open Challenges: Authenticated users can read/create/delete.
    match /openChallenges/{challengeId} {
        allow read, create: if request.auth != null;
        allow delete: if request.auth != null && resource.data.posterId == request.auth.uid;
        allow update: if false;
    }

    // Friend Requests: Can only be managed by sender or receiver.
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow list: if request.auth != null && (request.query.where.fromId == request.auth.uid || request.query.where.toId == request.auth.uid);
      allow create: if request.auth != null && isOwner(request.resource.data.fromId);
      allow delete: if request.auth != null && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow update: if false;
    }
    
    // Chats: Participants can read/write messages.
    match /chats/{chatId} {
      allow read, update: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }

    // Tournaments: Participants can read. Organizer can update.
    match /tournaments/{tournamentId} {
        allow read, list: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
        allow create: if request.auth != null && isOwner(request.resource.data.organizerId);
        allow update: if request.auth != null && isOwner(resource.data.organizerId);
        allow delete: if false;
    }
    
    // Games (Rally & Legend): Participants can read/update.
    match /rallyGames/{gameId} {
      allow read, update: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
    }

    match /legendGames/{gameId} {
      allow read, update: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
    }
  }
}
