rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Utility Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }
    
    // --- User Profiles ---
    // Anyone can read profiles for leaderboards, search, etc.
    // Only the owner can create, update, or delete their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwner(userId);
      
      // Practice sessions are private.
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // --- Friend Requests ---
    match /friendRequests/{requestId} {
      // Allow reading a list of requests sent TO me.
      allow list: if isSignedIn() && request.query.toId == request.auth.uid;
      // Allow reading a single request if I am the sender or receiver.
      allow get, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // Allow creating a request if I am the sender.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
    }

    // --- Challenges ---
    match /challenges/{challengeId} {
      // Allow reading lists of challenges sent TO or FROM me.
      allow list: if isSignedIn() && (request.query.toId == request.auth.uid || request.query.fromId == request.auth.uid);
       // Allow reading/deleting a single challenge if I am the sender or receiver.
      allow get, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // Allow creating a challenge if I am the sender.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
      // Allow updating (accepting/declining) if I am the receiver.
      allow update: if isSignedIn() && request.auth.uid == resource.data.toId;
    }

    // --- Open Challenges ---
    // Anyone can read open challenges. Only the poster can delete them.
    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }
    
    // --- Matches ---
    // A user can query matches they are a participant in.
    match /matches/{matchId} {
      allow read, update: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
    }

    // --- Chats & Messages ---
    // Participants can access their chat and messages.
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && isParticipant();
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    // --- Tournaments ---
    // Anyone can read tournaments. Organizer can update.
    match /tournaments/{tournamentId} {
      allow read, create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.organizerId);
    }

    // --- AI Games (Rally & Legend) ---
    // Participants can access their games.
    match /rallyGames/{gameId} {
      allow read, update, delete: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
      allow read, update, delete: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
    }
    
    // --- Reports ---
    // Any signed-in user can create a report.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}
