
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a participant in a document
    function isParticipant(docData) {
      return request.auth.uid in docData.participantIds;
    }

    // Users can be read by anyone, but only the user can write to their own document.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    // Matches can be read by participants. Creation happens via server-side logic in actions.
    match /matches/{matchId} {
      allow read: if isParticipant(resource.data);
      allow update: if isParticipant(resource.data); // For confirming/declining results
      allow create: if isAuthenticated();
    }
    
    // Friend Requests can be read/deleted by sender or receiver.
    // Creation is handled by the sender.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
      allow create: if request.auth.uid == request.resource.data.fromId;
    }

    // Challenges can be managed by the sender or receiver.
    match /challenges/{challengeId} {
      allow read: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
      allow create: if request.auth.uid == request.resource.data.fromId;
      allow update, delete: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
    }

    // Open challenges can be read by any authenticated user.
    // They can only be created or deleted by the poster.
    match /openChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == request.resource.data.posterId;
      allow delete: if request.auth.uid == resource.data.posterId;
    }
    
    // Chats can be read/written by participants.
    match /chats/{chatId} {
      allow read, write: if isParticipant(resource.data);
      
      // Messages within a chat follow the same rule.
      match /messages/{messageId} {
        allow read, write: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data);
      }
    }
    
    // Tournaments can be read by participants.
    match /tournaments/{tournamentId} {
        allow read: if isParticipant(resource.data);
        allow create: if request.auth.uid == request.resource.data.organizerId;
        allow update: if request.auth.uid == resource.data.organizerId;
    }
    
    // Games (both Rally and Legend) can be managed by participants.
    match /rallyGames/{gameId} {
        allow read, write: if isParticipant(resource.data);
    }
    match /legendGames/{gameId} {
        allow read, write: if isParticipant(resource.data);
    }
    
    // Practice sessions are private to the user.
    match /practiceSessions/{sessionId} {
        allow read, write, create: if request.auth.uid == request.resource.data.userId;
    }

    // Reports can only be created by authenticated users.
    match /reports/{reportId} {
      allow create: if isAuthenticated();
    }
    
    // Courts are public read-only for now.
    match /courts/{courtId} {
      allow read: if true;
    }
  }
}
