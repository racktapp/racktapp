rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow update: if isUser(userId);
      // Deny create/delete to prevent users from creating their own profiles outside the app flow
      // or deleting other users.
      allow create, delete: if false;
    }
    
    // Practice sessions can only be read/written by the owner.
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, write: if isUser(userId);
    }

    // Secure all game collections
    match /rallyGames/{gameId} {
        allow read: if isSignedIn() && resource.data.participantIds.includes(request.auth.uid);
        allow update: if isSignedIn() && resource.data.currentPlayerId == request.auth.uid;
        // Only participants can delete a game.
        allow delete: if isSignedIn() && resource.data.participantIds.includes(request.auth.uid);
    }
    match /legendGames/{gameId} {
        allow read: if isSignedIn() && resource.data.participantIds.includes(request.auth.uid);
        allow update: if isSignedIn() && resource.data.currentPlayerId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.participantIds.includes(request.auth.uid);
    }

    // Chats are private between participants.
    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        match /messages/{messageId} {
            allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
            allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
        }
    }
    
    // Leaderboard is public read-only
    match /leaderboards/{sport} {
        allow get: if true;
        allow write: if false;
    }

    // Challenges can be created by any user. Can only be read/updated by participants.
    match /challenges/{challengeId} {
        allow create: if isSignedIn();
        allow read, update, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Open challenges are public, but can only be created/deleted by the owner.
    match /openChallenges/{challengeId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn();
        allow delete: if isSignedIn() && request.auth.uid == resource.data.posterId;
    }

    // Friend requests are private between the two users involved.
    match /friendRequests/{requestId} {
        allow create: if isSignedIn();
        allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Matches can be read by anyone, but only updated/created by participants.
    match /matches/{matchId} {
      allow create: if isSignedIn() && request.resource.data.reportedById == request.auth.uid;
      allow read: if true;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
    }

    // Tournaments can be read by anyone, but only the organizer can update them.
    match /tournaments/{tournamentId} {
        allow create: if isSignedIn();
        allow read: if true;
        allow update: if isSignedIn() && resource.data.organizerId == request.auth.uid;
    }

    // Reports can only be created by signed-in users.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}
