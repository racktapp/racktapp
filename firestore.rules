rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- USERS ---
    // Anyone can view a user's public profile.
    // Only the authenticated user can modify their own document.
    match /users/{userId} {
      allow read: if true;
      allow write: if isUser(userId);

      // Anyone can read practice sessions, but only the user can create them.
      match /practiceSessions/{sessionId} {
        allow read: if true;
        allow create: if isUser(userId);
        allow update, delete: if false; // Sessions are immutable
      }
    }
    
    // --- FRIEND REQUESTS ---
    // Users can create requests.
    // Users can read/delete requests sent to them or by them.
    match /friendRequests/{requestId} {
      allow create: if isSignedIn();
      allow read, delete: if isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }

    // --- CHALLENGES ---
    // Users can create challenges.
    // Participants can read/update the challenge.
    match /challenges/{challengeId} {
        allow create: if isSignedIn();
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        allow delete: if false; // Challenges are updated to a 'cancelled' or 'declined' status, not deleted.
    }
    
    // --- OPEN CHALLENGES ---
    // Anyone can read open challenges.
    // Signed-in users can create them.
    // Only the poster can delete their own open challenge.
    match /openChallenges/{challengeId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && resource.data.posterId == request.auth.uid;
    }

    // --- MATCHES ---
    // Participants can read their own matches.
    // Signed-in users can create new pending matches.
    // Participants can update a match (to confirm/decline).
    match /matches/{matchId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
    }

    // --- CHATS ---
    // Participants can read/write to their own chats and messages.
    match /chats/{chatId} {
      allow read, create, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    // --- GAMES (Rally & Legend) ---
    // Participants can read/update their own games.
    match /rallyGames/{gameId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    // --- TOURNAMENTS ---
    // Anyone can read a tournament bracket.
    // Only authenticated users can create tournaments.
    // Only the organizer can update the tournament (e.g., report winners).
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.organizerId == request.auth.uid;
    }

    // --- REPORTS ---
    // Allow any signed-in user to create a report.
    match /reports/{reportId} {
      allow create: if isSignedIn();
      // Only backend processes should read/update reports.
      allow read, update, delete: if false; 
    }
  }
}
