rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to manage their own practice sessions
      match /practiceSessions/{sessionId} {
        allow list, get: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && request.auth.uid == userId && resource.data.userId == request.auth.uid;
      }
    }
    match /matches/{matchId} {
      allow read: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
    }
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create, delete: if request.auth != null;
      allow list: if request.auth != null && (request.query.where.toId == request.auth.uid || request.query.where.fromId == request.auth.uid);
    }
     match /challenges/{challengeId} {
      allow read: if request.auth != null && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow list: if request.auth != null && (request.query.where.toId == request.auth.uid || request.query.where.fromId == request.auth.uid);
    }
    match /openChallenges/{challengeId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.posterId == request.auth.uid;
    }
    match /tournaments/{tournamentId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null && resource.data.organizerId == request.auth.uid;
    }
    match /chats/{chatId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    match /rallyGames/{gameId} {
        allow read: if request.auth != null && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
        allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
        allow create, update, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    match /legendGames/{gameId} {
        allow read: if request.auth != null && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
        allow list: if request.auth != null && request.query.where.participantIds.hasAny([request.auth.uid]);
        allow create, update, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    match /reports/{reportId} {
      allow create: if request.auth != null;
    }
  }
}
