rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(resource) {
      return request.auth.uid in resource.data.participantIds;
    }
    
    function isFriend(userId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friendIds.hasAny([userId]);
    }

    // USER-RELATED COLLECTIONS
    match /users/{userId} {
      // Anyone can read a user's profile
      allow read: if true;
      // Only the user can update their own profile
      allow update: if isOwner(userId);
      // Users cannot be created or deleted directly via client SDK
      allow create, delete: if false;
    }

    match /users/{userId}/practiceSessions/{sessionId} {
      // Only the user can read or write their own practice sessions
      allow read, write: if isOwner(userId);
    }
    
    match /reports/{reportId} {
      // Only the reporter can create a report.
      allow create: if isOwner(request.resource.data.reporterId);
      // No one can read/update/delete reports from the client.
      allow read, update, delete: if false;
    }

    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      // Can read a request if you are the sender or receiver
      allow read: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
      // Can create if you are the sender
      allow create: if isOwner(request.resource.data.fromId);
      // Can delete if you are the sender or receiver (for declining/canceling)
      allow delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
      // Cannot update a request directly
      allow update: if false;
    }

    // CHALLENGES
    match /challenges/{challengeId} {
        // Can read if you are the sender or receiver
        allow read: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
        // Can create if you are the sender
        allow create: if isOwner(request.resource.data.fromId);
        // Can update status if you are the receiver (accept/decline) or sender (cancel)
        allow update: if (isOwner(resource.data.toId) && request.resource.data.status in ['accepted', 'declined']) || 
                         (isOwner(resource.data.fromId) && request.resource.data.status == 'cancelled');
        allow delete: if false;
    }

    match /openChallenges/{challengeId} {
        // Anyone can read open challenges
        allow read: if true;
        // Can create if you are the poster
        allow create: if isOwner(request.resource.data.posterId);
        // Can delete if you are the poster
        allow delete: if isOwner(resource.data.posterId);
        allow update: if false;
    }
    
    // MATCHES
    match /matches/{matchId} {
      // Can read if you are a participant
      allow read: if isParticipant(resource);
      // Can create if you are a participant
      allow create: if request.auth.uid in request.resource.data.participants;
      // Can update if you are a participant (to confirm/decline)
      allow update: if isParticipant(resource);
      allow delete: if false;
    }

    // CHATS & MESSAGES
    match /chats/{chatId} {
      allow read, update: if isParticipant(resource);
      allow create: if request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow create: if isOwner(request.resource.data.senderId);
        allow update, delete: if false;
      }
    }

    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read: if true; // Brackets are public
      allow create: if isOwner(request.resource.data.organizerId);
      allow update: if isOwner(resource.data.organizerId); // Only organizer can update scores
      allow delete: if false;
    }

    // GAMES
    match /rallyGames/{gameId} {
      allow read, update: if isParticipant(resource);
      allow create: if request.auth.uid in request.resource.data.participantIds;
      allow delete: if isParticipant(resource);
    }

    match /legendGames/{gameId} {
      allow read, update: if isParticipant(resource);
      allow create: if request.auth.uid in request.resource.data.participantIds;
      allow delete: if isParticipant(resource);
    }
  }
}
