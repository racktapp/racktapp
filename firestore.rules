
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS: Authenticated users can read profiles, owners can write.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }
    
    // FRIEND REQUESTS: Read/delete if you are the sender or receiver. Create if you are the sender.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
    }

    // OPEN CHALLENGES: Public to read. Create/delete your own.
    match /openChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.posterId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.posterId == request.auth.uid;
    }
    
    // CHALLENGES: Private to participants.
    match /challenges/{challengeId} {
       allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // CHATS
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // For create, we check the incoming data (request.resource)
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // MATCHES
    match /matches/{matchId} {
      // Note: 'participants' is the field name here
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated(); // Server action handles this
    }
    
    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }

    // RALLY GAMES
    match /rallyGames/{gameId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
    }
    
    // LEGEND GAMES
    match /legendGames/{gameId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
    }
  }
}
