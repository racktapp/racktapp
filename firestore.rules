rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);

      // Users can only access their own practice sessions
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // --- Social & Communication ---

    // Friend requests can be read by sender/receiver, created by sender, deleted by sender/receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
    }

    // Chat messages can be read/written by participants.
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // Reports can only be created by an authenticated user.
    match /reports/{reportId} {
        allow create: if isAuthenticated();
    }

    // --- Challenges & Matches ---

    // Direct challenges can be accessed by participants.
    match /challenges/{challengeId} {
      allow read, write, update: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
    }
    
    // Open challenges can be read by anyone, but only created/deleted by the poster.
    match /openChallenges/{challengeId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.posterId);
        allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }

    // Matches can be read by participants, created by participants.
    match /matches/{matchId} {
        allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
        allow update: if isAuthenticated() && request.auth.uid in resource.data.participantsToConfirm;
    }
    
    // --- Games & Tournaments ---

    // Tournaments can be read by participants, created by the organizer.
    match /tournaments/{tournamentId} {
        allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isAuthenticated() && isOwner(request.resource.data.organizerId);
        allow update: if isAuthenticated() && isOwner(resource.data.organizerId);
    }

    // Rally Games can be accessed and played by participants.
    match /rallyGames/{gameId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Legend Games can be accessed and played by participants.
    match /legendGames/{gameId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

  }
}
