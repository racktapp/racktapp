
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Helper function to check if a user is a participant in a document
    function isParticipant(resource) {
      return isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can only read/write their own practice sessions
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Reports can only be created by authenticated users. Admins would read/delete them.
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, write, delete: if false; // Only allow admin access
    }

    // A user can read a match if they are a participant.
    // A user can only create/update a match if they are a participant.
    match /matches/{matchId} {
      allow read: if isParticipant(resource);
      allow create, update: if isParticipant(request.resource);
    }
    
    // A user can only access friend requests where they are the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
    }

    // A user can only access direct challenges where they are the sender or receiver.
    match /challenges/{challengeId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
    }
    
    // Open challenges are public to read, but only the poster can create/delete them.
    match /openChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.posterId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }
    
    // A user can only access a chat if they are a participant.
    match /chats/{chatId} {
      allow read, update: if isParticipant(resource);
      allow create: if isParticipant(request.resource);

      // Messages can be read by chat participants and created by the sender.
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // A user can only access a tournament if they are a participant.
    match /tournaments/{tournamentId} {
      allow read: if isParticipant(resource);
      allow create, update: if isParticipant(request.resource);
    }
    
    // A user can only access a rally game if they are a participant.
    match /rallyGames/{gameId} {
        allow read, update: if isParticipant(resource);
        allow create: if isParticipant(request.resource);
        allow delete: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/rallyGames/$(gameId)).data.participantIds;
    }
    
    // A user can only access a legend game if they are a participant.
    match /legendGames/{gameId} {
        allow read, update: if isParticipant(resource);
        allow create: if isParticipant(request.resource);
        allow delete: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/legendGames/$(gameId)).data.participantIds;
    }
  }
}
