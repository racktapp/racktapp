rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // USER-RELATED RULES

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUser(userId);
      allow update: if isUser(userId) && request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl', 'flexedAchievementId']);
    }

    // Friend Requests
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
    }

    // Reports
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      // No read/update/delete for users
    }

    // GAME-RELATED RULES

    // Matches Collection
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow list: if isAuthenticated(); // Listing is handled by query constraints in the app
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }
    
    // Rally Games Collection
    match /rallyGames/{gameId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Legend Games Collection
    match /legendGames/{gameId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated();
       allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Tournaments Collection
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }

    // SOCIAL & CHALLENGE RULES
    
    // Open Challenges
    match /openChallenges/{challengeId} {
        allow read, list: if isAuthenticated();
        allow create: if isAuthenticated() && isUser(request.resource.data.posterId);
        allow delete: if isAuthenticated() && isUser(resource.data.posterId);
    }
    
    // Direct Challenges
    match /challenges/{challengeId} {
        allow read, update, list: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && isUser(request.resource.data.fromId);
    }
    
    // Chat Collection
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated();
      allow create: if isAuthenticated();
      
      // Messages Subcollection
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    // USER-CONTENT RULES
    
    // Practice Sessions
    match /practiceSessions/{sessionId} {
      allow read, list, create, update, delete: if isAuthenticated() && isUser(resource.data.userId);
    }
  }
}