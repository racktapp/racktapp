rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant(resourceId, collectionName) {
      return request.auth.uid in get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.participantIds;
    }
    
    // USERS
    // Users can be read by anyone authenticated (for profiles, leaderboards).
    // A user can only create their own doc and update their own non-statistical data.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
                       !('sports' in request.resource.data) &&
                       !('friendIds' in request.resource.data);
      allow delete: if false; // Deletion should be a server-side process
    }

    // MATCHES
    // Can only be created/updated by server-side functions (transactions).
    // Can be read by any participant.
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create, update, delete: if false; // Handled by server actions
    }

    // FRIEND REQUESTS
    // Can be created by anyone authenticated.
    // Can only be read or deleted by the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && 
                             (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow update: if false;
    }

    // CHALLENGES
    // Direct challenges between two users.
    match /challenges/{challengeId} {
      allow read, update: if isAuthenticated() && 
                             (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isAuthenticated() && 
                      (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // OPEN CHALLENGES
    // Public challenges anyone can see and accept.
    match /openChallenges/{challengeId} {
      allow read, create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
      allow update: if false;
    }
    
    // TOURNAMENTS
    // Can be read by any participant.
    // Create/Update/Delete handled by server actions.
    match /tournaments/{tournamentId} {
        allow read: if isAuthenticated() && isParticipant(tournamentId, 'tournaments');
        allow create, update, delete: if false;
    }

    // CHATS
    // A user can only read/write to chats they are a part of.
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && isParticipant(chatId, 'chats');
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow delete: if false;

      // MESSAGES
      // A user can only read/write messages in a chat they are a part of.
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(chatId, 'chats');
        allow create: if isAuthenticated() && isParticipant(chatId, 'chats') && isOwner(request.resource.data.senderId);
        allow update, delete: if false;
      }
    }
    
    // GAMES (Rally & Legend)
    // A user can only read/write to games they are a part of.
    match /rallyGames/{gameId} {
      allow read, update: if isAuthenticated() && isParticipant(gameId, 'rallyGames');
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow delete: if isAuthenticated() && isParticipant(gameId, 'rallyGames');
    }
     match /legendGames/{gameId} {
      allow read, update: if isAuthenticated() && isParticipant(gameId, 'legendGames');
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow delete: if isAuthenticated() && isParticipant(gameId, 'legendGames');
    }

    // PRACTICE SESSIONS
    // Users can only manage their own practice sessions.
    match /practiceSessions/{sessionId} {
      allow read, create, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // REPORTS
    // Users can create reports, but not read them.
    match /reports/{reportId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.reporterId);
        allow read, update, delete: if false; // Only admins
    }
    
    // COURTS (Assuming this might be a future feature, read-only for now)
    match /courts/{courtId} {
        allow read: if isAuthenticated();
        allow write: if false; // Managed by admins
    }
  }
}