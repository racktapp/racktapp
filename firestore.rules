rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to keep rules DRY
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isParticipant(docData) {
      return isSignedIn() && request.auth.uid in docData.participantIds;
    }

    // USER:
    // - Anyone can read public user profiles.
    // - Users can only create and update their own profile.
    // - Users can delete their own profile.
    match /users/{userId} {
      allow read;
      allow create, update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // PRACTICE SESSIONS:
      // Users can only manage their own practice sessions.
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // FRIEND REQUESTS:
    // - Users can create a request.
    // - Users can read requests sent to or from them.
    // - Users can delete requests they sent or received.
    match /friendRequests/{requestId} {
      allow create: if isSignedIn();
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // CHALLENGES (Direct):
    // - Authenticated users can create challenges.
    // - Participants can read or update (accept/decline) the challenge.
    match /challenges/{challengeId} {
      allow create: if isSignedIn();
      allow read, update: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // OPEN CHALLENGES:
    // - Authenticated users can read/create open challenges.
    // - The user who posted it can delete it.
    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && request.auth.uid == resource.data.posterId;
    }

    // MATCHES:
    // - Logged-in users can create a match document (report a match).
    // - Participants can read and update (confirm/decline) the match.
    match /matches/{matchId} {
      allow create: if isSignedIn();
      allow read, update: if isParticipant(resource.data);
    }
    
    // CHATS:
    // - Participants can read/write chat metadata.
    match /chats/{chatId} {
      allow read, update: if isParticipant(resource.data);
      
      // MESSAGES:
      // - Participants can read messages in their chat.
      // - A user can only create messages as themselves.
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data);
        allow create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data) && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // TOURNAMENTS:
    // - Authenticated users can create tournaments.
    // - Participants can read and update the tournament.
    match /tournaments/{tournamentId} {
      allow create: if isSignedIn();
      allow read, update: if isParticipant(resource.data);
    }
    
    // RALLY GAMES & LEGEND GAMES:
    // - These collections follow the same pattern: only participants can interact with them.
    match /rallyGames/{gameId} {
      allow read, update, delete: if isParticipant(resource.data);
      allow create: if isSignedIn();
    }
    
    match /legendGames/{gameId} {
      allow read, update, delete: if isParticipant(resource.data);
      allow create: if isSignedIn();
    }

    // REPORTS:
    // - Any authenticated user can create a report.
    match /reports/{reportId} {
        allow create: if isSignedIn();
    }
  }
}
