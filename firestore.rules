
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);

      // Users can read and write to their own practice sessions subcollection
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Friend requests can be read by involved parties, created by anyone, deleted by involved parties.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated();
    }

    // Direct challenges can be read/updated by involved parties.
    match /challenges/{challengeId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated();
    }

    // Open challenges can be read by anyone, created by authenticated users, and deleted only by the owner.
    match /openChallenges/{challengeId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }
    
    // Matches can be read by participants, created by anyone authenticated.
    // Updates for confirmation/declining are allowed by participants.
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Chats and messages can only be accessed by participants.
    match /chats/{chatId} {
      allow read, update, create: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    // Tournaments can be read by anyone, but only created/updated by participants.
    match /tournaments/{tournamentId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Game collections (Rally & Legend) can be read/updated by participants.
    match /rallyGames/{gameId} {
       allow read, create, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
       allow read, create, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    // Reports can be created by any authenticated user.
    match /reports/{reportId} {
        allow create: if isAuthenticated();
    }
  }
}
