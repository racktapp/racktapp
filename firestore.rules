rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can read any other user's profile for leaderboards, search, etc.
    // A user can only write to their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Practice sessions are private to the user.
      match /practiceSessions/{sessionId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // --- Collection Group Queries ---
    // These rules are for list queries made by the app, often by listeners.
    // They must be simple and directly match the query's `where` clauses.

    // Allow fetching friend requests sent TO the current user.
    match /friendRequests/{requestId} {
      allow list: if request.auth.uid == resource.data.toId;
      // Individual doc access for sender/receiver
      allow get, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
    }
    
    // Allow fetching challenges sent TO the current user.
    match /challenges/{challengeId} {
      allow list: if request.auth.uid == resource.data.toId;
      // Individual doc access for sender/receiver
      allow get, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
      allow update: if request.auth != null && request.auth.uid == resource.data.toId;
    }

    // --- Participant-based Rules ---
    // These collections are queried using 'array-contains'.
    
    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }
    
    function isParticipantInRequest() {
        return request.auth.uid in request.resource.data.participantIds;
    }
    
    match /matches/{matchId} {
        allow list, read: if request.auth != null && isParticipant();
        allow create, update: if request.auth != null && isParticipantInRequest();
    }
    
    match /chats/{chatId} {
        allow list, read: if request.auth != null && isParticipant();
        allow create, update: if request.auth != null && isParticipantInRequest();
        
        match /messages/{messageId} {
            allow list, read: if request.auth != null && isParticipant();
            allow create: if request.auth != null && isParticipantInRequest();
        }
    }

    match /rallyGames/{gameId} {
        allow list, read: if request.auth != null && isParticipant();
        allow create, update, delete: if request.auth != null && isParticipantInRequest();
    }

    match /legendGames/{gameId} {
        allow list, read: if request.auth != null && isParticipant();
        allow create, update, delete: if request.auth != null && isParticipantInRequest();
    }
    
    match /tournaments/{tournamentId} {
        allow list, read: if request.auth != null && isParticipant();
        allow create: if request.auth != null && isParticipantInRequest();
        allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }

    // --- Public & Simple Rules ---
    
    match /openChallenges/{challengeId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.posterId;
    }
    
    match /reports/{reportId} {
      allow create: if request.auth != null;
    }
  }
}
