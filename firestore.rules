
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read all public profiles, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Users can only manage their own practice sessions
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Reports can only be created by authenticated users. Read/update/delete only for admins (not defined here).
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        allow read, update, delete: if false; 
    }

    // Friend requests can be read by involved parties, and only the recipient can delete/accept.
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }

    // Participants of a chat can read/write messages.
    match /chats/{chatId} {
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated() && request.query.where.field == 'participantIds' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }

    // Challenges can be read by involved parties.
    match /challenges/{challengeId} {
        allow read, list: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
        allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
        allow update, delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
    
    // Open challenges are public to read, but only the owner can manage them.
    match /openChallenges/{challengeId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.posterId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.posterId == request.auth.uid;
    }
    
    // Shared rules for all games
    function isGameParticipant() {
      return isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /rallyGames/{gameId} {
      allow read, update, delete: if isGameParticipant();
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow list: if isAuthenticated() && request.query.where.field == 'participantIds' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;
    }

    match /legendGames/{gameId} {
      allow read, update, delete: if isGameParticipant();
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow list: if isAuthenticated() && request.query.where.field == 'participantIds' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;
    }

    // Matches can be read by participants.
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow list: if isAuthenticated() && request.query.where.field == 'participants' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Tournaments can be read by participants.
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow list: if isAuthenticated() && request.query.where.field == 'participantIds' && request.query.where.op == 'array-contains' && request.query.where.value == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.organizerId == request.auth.uid;
    }
  }
}
