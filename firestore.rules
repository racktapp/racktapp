rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a participant in a document
    function isParticipant(resource) {
        return request.auth.uid in resource.data.participantIds;
    }

    // Users: Can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Friend Requests: Can only be created by the sender, and read/deleted by sender or receiver.
    match /friendRequests/{requestId} {
        allow read, delete: if isAuthenticated() && (isOwner(request.resource.data.fromId) || isOwner(request.resource.data.toId));
        allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
    }

    // Matches: Only participants can read/write.
    match /matches/{matchId} {
      allow read, write: if isAuthenticated() && isParticipant(resource);
    }
    
    // Chats & Messages: Only participants can read/write.
    match /chats/{chatId} {
        allow read, write: if isAuthenticated() && isParticipant(resource);
        
        match /messages/{messageId} {
            allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        }
    }
    
    // Challenges: Can be read by anyone involved, created by the sender.
    match /challenges/{challengeId} {
        allow read, write: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
        allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
    }
    
    // Open Challenges: Any authenticated user can read/create. Only owner can delete.
    match /openChallenges/{challengeId} {
        allow read, create: if isAuthenticated();
        allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }
    
    // Tournaments: Only participants can read/write.
    match /tournaments/{tournamentId} {
        allow read, write: if isAuthenticated() && isParticipant(resource);
    }

    // Games: Only participants can read/write.
    match /rallyGames/{gameId} {
        allow read, write: if isAuthenticated() && isParticipant(resource);
    }
    match /legendGames/{gameId} {
        allow read, write: if isAuthenticated() && isParticipant(resource);
    }
    
    // Practice Sessions: Only the owner can read/write.
    match /practiceSessions/{sessionId} {
        allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Reports: Any authenticated user can create.
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        // Read/write should be limited to admins, which is handled by default (no rule = no access)
    }
  }
}
