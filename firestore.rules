
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Deny all access by default
    match /{document=**} {
      allow read, write: if false;
    }

    //
    // Functions
    //
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant(resource) {
        return isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    //
    // User Rules
    //
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId);
      
      // Allow reading and writing to a user's own practice session subcollection
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    //
    // Reports Rules
    //
    match /reports/{reportId} {
        allow create: if isSignedIn();
    }
    
    //
    // Friend Request Rules
    //
    match /friendRequests/{requestId} {
        // Allow creating a request if you are the sender
        allow create: if isSignedIn() && isOwner(request.resource.data.fromId);

        // Allow reading if you are the sender OR the receiver
        allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
        
        // Allow deleting/updating (for accept/decline) if you are the sender or receiver
        allow update, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    //
    // Match Rules
    //
    match /matches/{matchId} {
        allow read: if isParticipant(resource);
        allow create: if isParticipant(request.resource);
        allow update: if isParticipant(resource);
    }
    
    //
    // Challenge Rules
    //
    match /challenges/{challengeId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
        allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
        allow update, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }

    match /openChallenges/{challengeId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.posterId);
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }
    
    //
    // Tournament Rules
    //
    match /tournaments/{tournamentId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.organizerId);
        allow read: if isParticipant(resource);
        // Only the organizer can update the tournament (e.g., report winners)
        allow update: if isSignedIn() && isOwner(resource.data.organizerId);
    }
    
    //
    // Chat Rules
    //
    match /chats/{chatId} {
        allow read, write: if isParticipant(resource);
        
        match /messages/{messageId} {
            allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
            allow create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId))) && isOwner(request.resource.data.senderId);
        }
    }
    
    //
    // Game Rules (Rally & Legend)
    //
    match /rallyGames/{gameId} {
        allow read: if isParticipant(resource);
        allow create: if isParticipant(request.resource);
        allow update: if isParticipant(resource) && isOwner(resource.data.currentPlayerId);
        allow delete: if isParticipant(resource);
    }
    
    match /legendGames/{gameId} {
        allow read: if isParticipant(resource);
        allow create: if isParticipant(request.resource);
        allow update: if isParticipant(resource);
        allow delete: if isParticipant(resource);
    }
  }
}
