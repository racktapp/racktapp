
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY FUNCTIONS
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    //------------------------------------------------------------
    // USERS
    //------------------------------------------------------------
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Logged-in users can list other users (e.g., for search)
      allow list: if isAuthenticated();
      
      // A user can only create their own document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // A user can only update their own document
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // A user cannot delete their document (for data integrity)
      allow delete: if false;
    }
    
    //------------------------------------------------------------
    // MATCHES
    //------------------------------------------------------------
    match /matches/{matchId} {
      // A user can only read a match if they are a participant
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participants;
      // A user can list matches they participated in
      allow list: if isAuthenticated() && request.query.where.get('participants').get('array-contains') == request.auth.uid;

      // Anyone authenticated can create a new match document (report a match)
      allow create: if isAuthenticated();
      // Only participants can update a match document (e.g., for confirmation)
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      // Allow deletion for declined matches by participants
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }
    
    //------------------------------------------------------------
    // CHALLENGES
    //------------------------------------------------------------
    match /challenges/{challengeId} {
       // Only the sender or receiver can read the challenge
      allow get: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // Allow listing challenges sent TO or FROM the user
      allow list: if isAuthenticated();
      
      // An authenticated user can create a challenge
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      // Only the sender or receiver can update the challenge (accept, decline, cancel)
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    match /openChallenges/{challengeId} {
      // Anyone authenticated can read/list open challenges
      allow read: if isAuthenticated();
      
      // Authenticated users can create open challenges
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.posterId;
      // Only the poster can delete their open challenge
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }
    
    //------------------------------------------------------------
    // CHATS
    //------------------------------------------------------------
    match /chats/{chatId} {
      // A user can only read a chat if they are a participant
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Allow listing chats where the user is a participant
      allow list: if isAuthenticated() && request.query.where.get('participantIds').get('array-contains') == request.auth.uid;

      // Creation is handled by a server action, but let's allow it if the user is a participant
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      // Only participants can update the chat (lastRead, lastMessage)
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read messages in the chat
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        // Participants can create messages in the chat
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    //------------------------------------------------------------
    // FRIEND REQUESTS
    //------------------------------------------------------------
    match /friendRequests/{requestId} {
      // Only the sender or receiver can interact with a friend request
      allow read, write, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      // Allow listing of requests sent or received
      allow list: if isAuthenticated();
    }
    
    //------------------------------------------------------------
    // GAMES
    //------------------------------------------------------------
    match /{gameCollection}/{gameId} where gameCollection in ['rallyGames', 'legendGames'] {
      // Participants can read their own game documents
      allow get: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Allow listing games where the user is a participant
      allow list: if isAuthenticated() && request.query.where.get('participantIds').get('array-contains') == request.auth.uid;
      
      // Creation is done via server action/transaction, but let's add a rule
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      // Only participants can update a game document
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Participants can delete a game
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    //------------------------------------------------------------
    // TOURNAMENTS
    //------------------------------------------------------------
    match /tournaments/{tournamentId} {
       // Anyone authenticated can view a tournament
      allow get: if isAuthenticated();
      // Allow listing tournaments a user is part of
      allow list: if isAuthenticated() && request.query.where.get('participantIds').get('array-contains') == request.auth.uid;
      
      // Only authenticated users can create tournaments
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.organizerId;
      // Only the organizer can update the tournament (report winners)
      allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }
  }
}
