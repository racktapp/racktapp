rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Default Security: Deny all reads/writes unless specified below.
    // =================================================================
    match /{document=**} {
      allow read, write: if false;
    }

    // =================================================================
    // User Profiles (`users`)
    // =================================================================
    match /users/{userId} {
      // Anyone can read a user's public profile data.
      allow read: if true;
      
      // A user can create their own profile document.
      allow create: if request.auth.uid == userId;
      
      // A user can only update their own profile.
      allow update: if request.auth.uid == userId;

      // A user can delete their own account data.
      allow delete: if request.auth.uid == userId;
    }

    // =================================================================
    // Matches (`matches`)
    // =================================================================
    match /matches/{matchId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }
      
      // Participants can read their own match documents.
      allow read: if isParticipant();
      
      // Participants can create a new match document.
      allow create: if request.auth.uid in request.resource.data.participants;
      
      // Participants can update a match document (e.g., confirming results).
      allow update: if isParticipant();
      
      // A match document can be declined (deleted) by a participant.
      allow delete: if isParticipant();
    }
    
    // =================================================================
    // Challenges (`challenges` and `openChallenges`)
    // =================================================================
    match /challenges/{challengeId} {
      function isChallengeParticipant() {
        return request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      }
      // Participants can read their own direct challenges.
      allow read, get: if isChallengeParticipant();

      // Users can create challenges.
      allow create: if request.auth.uid == request.resource.data.fromId;
      
      // Participants can update challenges (e.g., accept/decline).
      allow update: if isChallengeParticipant();
    }
    
    match /openChallenges/{challengeId} {
      // Anyone authenticated can read open challenges.
      allow read, list: if request.auth != null;
      
      // Users can create open challenges for themselves.
      allow create: if request.auth.uid == request.resource.data.posterId;
      
      // Only the user who posted an open challenge can delete it.
      allow delete: if request.auth.uid == resource.data.posterId;
    }
    
    // =================================================================
    // Friend Requests (`friendRequests`)
    // =================================================================
    match /friendRequests/{requestId} {
      function isRequestParticipant() {
        return request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      }
      // Only the sender or receiver can read the request.
      allow read, get: if isRequestParticipant();
      
      // The sender can create a request.
      allow create: if request.auth.uid == request.resource.data.fromId;
      
      // The receiver can delete (accept/decline) the request.
      allow delete: if request.auth.uid == resource.data.toId;
    }

    // =================================================================
    // Chats and Messages (`chats`, `chats/{chatId}/messages`)
    // =================================================================
    match /chats/{chatId} {
      function isChatParticipant() {
        return request.auth.uid in resource.data.participantIds;
      }
      // Participants can read the chat document.
      allow get: if isChatParticipant();
      
      // Authenticated users can query for chats they are a part of.
      allow list: if request.auth != null && request.auth.uid in request.query.where.participantIds;

      // Participants can create and update chats.
      allow create, update: if request.auth.uid in request.resource.data.participantIds;
      
      // --- Sub-collection: Messages ---
      match /messages/{messageId} {
        // Participants can read messages in their chats.
        allow read, list: if isChatParticipant();
        
        // A user can only send messages as themselves in a chat they are part of.
        allow create: if request.auth.uid == request.resource.data.senderId && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    // =================================================================
    // Games (`rallyGames`, `legendGames`)
    // =================================================================
    function isGameParticipant(gameType) {
       return request.auth.uid in get(/databases/$(database)/documents/$(gameType)/$(request.params.gameId)).data.participantIds;
    }
    
    match /rallyGames/{gameId} {
      allow read, write: if isGameParticipant('rallyGames');
      allow create: if request.auth.uid in request.resource.data.participantIds;
    }

    match /legendGames/{gameId} {
      allow read, write: if isGameParticipant('legendGames');
      allow create: if request.auth.uid in request.resource.data.participantIds;
    }

    // =================================================================
    // Tournaments (`tournaments`)
    // =================================================================
    match /tournaments/{tournamentId} {
      // Any authenticated user can view a tournament bracket.
      allow read: if request.auth != null;
      
      // The organizer can create a tournament.
      allow create: if request.auth.uid == request.resource.data.organizerId;

      // Only the organizer can update the tournament (e.g., report winners).
      allow update: if request.auth.uid == resource.data.organizerId;
    }

    // =================================================================
    // Practice Sessions (`practiceSessions`)
    // =================================================================
    match /practiceSessions/{sessionId} {
      // A user can only read, write, and delete their own practice sessions.
      allow read, write, delete: if request.auth.uid == resource.data.userId;
      
      // A user can create a practice session for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // =================================================================
    // User Reports (`reports`)
    // =================================================================
    match /reports/{reportId} {
      // Only authenticated users can create a report.
      allow create: if request.auth.uid == request.resource.data.reporterId;
    }
  }
}
