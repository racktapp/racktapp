
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a participant in a resource
    function isParticipant(resource) {
        return isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Users can be read by anyone authenticated, but only written by the owner.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      // No user deletion for now to maintain data integrity
      allow delete: if false;
    }

    // Matches can be read by participants, created by anyone authenticated,
    // and updated by participants.
    match /matches/{matchId} {
      allow read: if isParticipant(resource);
      allow create: if isAuthenticated();
      // Allow updates for status changes by participants
      allow update: if isParticipant(resource);
      // Allow deletion only if the match was declined (to clean up)
      allow delete: if isParticipant(resource) && resource.data.status == 'declined';
    }

    // Challenges can be read by involved parties, created, and updated.
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.fromId;
    }

    // Open challenges can be read by anyone authenticated, created by owner, deleted by owner.
    match /openChallenges/{challengeId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.posterId);
      allow delete: if isOwner(resource.data.posterId);
      allow update: if false;
    }

    // Friend requests are private between the sender and receiver.
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Chats and their sub-collections (messages) can only be accessed by participants.
    match /chats/{chatId} {
      allow read, update: if isParticipant(resource);
      // Chat creation is handled in a transaction, allow if authenticated.
      allow create: if isAuthenticated();
      
      match /messages/{messageId} {
        allow read, create: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
        allow update, delete: if false;
      }
    }
    
    // Tournaments can be read by participants, created by anyone, and updated only by the organizer.
    match /tournaments/{tournamentId} {
      allow read: if isParticipant(resource);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
      allow delete: if false;
    }

    // Games can be read/updated by participants.
    match /rallyGames/{gameId} {
      allow read, update: if isParticipant(resource);
      allow create: if isAuthenticated();
      allow delete: if isParticipant(resource);
    }

    match /legendGames/{gameId} {
      allow read, update: if isParticipant(resource);
      allow create: if isAuthenticated();
      allow delete: if isParticipant(resource);
    }
  }
}
