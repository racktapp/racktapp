rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }
    
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // User profiles are readable by anyone, but only the owner can write.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
      
      // Users can manage their own practice sessions
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // Matches can be read by participants, but writes are handled by cloud functions/server actions.
    match /matches/{matchId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn();
      allow update, delete: if false; // All updates via server actions
    }

    // Challenges can be read by involved parties.
    match /challenges/{challengeId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
        allow update: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow delete: if isSignedIn() && request.auth.uid == resource.data.fromId;
    }

    // Open challenges can be read by anyone signed in.
    match /openChallenges/{challengeId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.posterId;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.posterId;
    }

    // Friend requests are readable by the sender and receiver.
    match /friendRequests/{requestId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Chat documents and messages are only accessible to participants.
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow update, delete: if false; // No editing/deleting messages
      }
    }
    
    // Tournament documents are readable by participants.
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.organizerId;
      allow delete: if false;
    }
    
    // Game documents are only accessible to participants
    match /rallyGames/{gameId} {
       allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
       allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    // User reports can only be created by signed-in users.
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update, delete: if false; // Only accessible by admin/moderator roles
    }
  }
}
