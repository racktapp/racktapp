
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }

    // Default: Deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection
    // Anyone can read a user's public profile.
    // Only the user can write to their own document.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId);
    }
    
    // FRIEND REQUESTS collection
    // Allow read/write if you are the sender or receiver of the request.
    match /friendRequests/{requestId} {
      allow read, create, delete: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // MATCHES, CHALLENGES, and CHATS collections
    // Allow read/write/update if you are a participant.
    // Allow list (query) if the query is for documents you are a participant in.
    match /{collectionName}/{docId}
      where collectionName in ['matches', 'challenges', 'chats'] {
        allow read, update, delete: if isAuth() && isParticipant();
        allow create: if isAuth(); // Further validation in backend logic
        allow list: if isAuth() && request.auth.uid in request.query.where.value;
    }
    
    // Allow read for messages within a chat you are part of.
    match /chats/{chatId}/messages/{messageId} {
       allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // GAME collections
    // Allow read/write/update if you are a participant in the game.
    match /{gameCollection}/{gameId}
       where gameCollection in ['rallyGames', 'legendGames'] {
        allow read, update, delete: if isAuth() && isParticipant();
        allow create: if isAuth(); // Further validation in backend logic
        allow list: if isAuth() && request.auth.uid in request.query.where.value;
    }

    // TOURNAMENTS collection
    // Allow read to any authenticated user.
    // Allow creation/updates only by the organizer.
    match /tournaments/{tournamentId} {
        allow read, create: if isAuth();
        allow update, delete: if isAuth() && request.auth.uid == resource.data.organizerId;
    }
    
    // OPEN CHALLENGES collection
    // Allow any authenticated user to read/list challenges.
    // Allow users to create challenges.
    // Allow only the owner to delete their own open challenge.
    match /openChallenges/{challengeId} {
      allow read: if isAuth();
      allow create: if isAuth() && isOwner(request.resource.data.posterId);
      allow delete: if isAuth() && isOwner(resource.data.posterId);
    }
    
    // PRACTICE SESSIONS collection
    // Users can only read/write their own practice sessions.
    match /practiceSessions/{sessionId} {
      allow read, write: if isAuth() && request.auth.uid == resource.data.userId;
    }

    // REPORTS collection
    // Users can create reports. No one can read them directly.
    match /reports/{reportId} {
      allow create: if isAuth();
    }
  }
}
