
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Users can read any profile, but only write to their own.
    // Usernames must be unique on creation.
    match /users/{userId} {
      allow read: if true;
      allow create: if isUser(userId) && 
                      !exists(/databases/$(database)/documents/users_by_username/$(request.resource.data.username));
      allow update: if isUser(userId);
      allow delete: if isUser(userId);
    }
    
    // A private collection to enforce unique usernames. Only backend can write.
    match /users_by_username/{username} {
        allow read, write: if false; // Only backend can manage this
    }

    // Participants can read/update chats.
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      // Anyone can create a chat (actions will protect this)
      allow create: if isSignedIn();
    }
    
    // Participants can read/write messages in a chat they belong to.
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // Users can only read friend requests sent to or from them.
    match /friendRequests/{requestId} {
      allow read: if isUser(resource.data.fromId) || isUser(resource.data.toId);
      allow create: if isUser(request.resource.data.fromId);
      allow delete: if isUser(resource.data.fromId) || isUser(resource.data.toId);
    }
    
    // Users can only read challenges sent to or from them.
    match /challenges/{challengeId} {
        allow read, update: if isUser(resource.data.fromId) || isUser(resource.data.toId);
        allow create: if isUser(request.resource.data.fromId);
    }
    
    // Any signed-in user can read open challenges.
    // Only the poster can create/delete their own open challenges.
    match /openChallenges/{challengeId} {
        allow read: if isSignedIn();
        allow create: if isUser(request.resource.data.posterId);
        allow delete: if isUser(resource.data.posterId);
    }
    
    // Participants can read/update a match they are in.
    match /matches/{matchId} {
      allow read, update: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
      // Reporting a match (create) is handled by server-side logic (actions)
      allow create: if isSignedIn(); 
    }
    
    // Participants can read/update tournaments they are in.
    match /tournaments/{tournamentId} {
      allow read, update: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
      allow create: if isUser(request.resource.data.organizerId);
    }
    
    // Game Rules: Rally & Legend
    match /rallyGames/{gameId} {
        allow read, update, delete: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
        allow create: if isSignedIn();
    }
    
    match /legendGames/{gameId} {
        allow read, update, delete: if isSignedIn() && resource.data.participantIds.hasAny([request.auth.uid]);
        allow create: if isSignedIn();
    }
    
    // Users can only manage their own practice sessions.
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, create, delete: if isUser(userId);
    }

    // Any signed in user can create a report
    match /reports/{reportId} {
        allow create: if isSignedIn();
        allow read, update, delete: if false; // Only admin access
    }
  }
}
