rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Publicly readable, but only the user can write to their own document.
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;

      // Practice Sessions are private to the user.
      match /practiceSessions/{sessionId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Reports: Users can create reports, but not read or modify them.
    match /reports/{reportId} {
      allow create: if request.auth.uid != null;
      allow read, update, delete: if false;
    }

    // A user can access a document if their UID is in the `participantIds` array.
    // This covers: chats, rallyGames, legendGames, tournaments
    match /{collection}/{docId} where collection in ['chats', 'rallyGames', 'legendGames', 'tournaments'] {
      allow read, write: if request.auth.uid in resource.data.participantIds;
    }

    // Messages: Only participants of the parent chat can read or write messages.
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow update, delete: if false; // Messages are immutable
    }

    // Matches: Readable/writable by participants.
    match /matches/{matchId} {
      allow read, write: if request.auth.uid in resource.data.participants;
    }

    // Challenges: Readable/writable by sender or receiver.
    match /challenges/{challengeId} {
       allow read, write: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }

    // Friend Requests: Readable/writable by sender or receiver.
    match /friendRequests/{requestId} {
       allow read, write: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }

    // Open Challenges: Publicly readable, but only the poster can delete.
    match /openChallenges/{challengeId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.posterId;
      allow delete: if request.auth.uid == resource.data.posterId;
      allow update: if false;
    }
  }
}
