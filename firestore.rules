rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny: No one can read or write to any collection unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read any profile, but only update their own.
    match /users/{userId} {
      allow get: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl', 'sports']);
      allow delete: if request.auth.uid == userId;
    }

    // Users can only manage their own practice sessions subcollection.
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Challenges can be read by involved parties and created by any authenticated user.
    match /challenges/{challengeId} {
      allow read: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      // Allow the query from the notifications hook
      allow list: if request.auth.uid != null && request.query.where.toId == request.auth.uid;
    }
    
    // Open challenges can be read by anyone, but only created/deleted by the poster.
    match /openChallenges/{challengeId} {
      allow read, create: if request.auth.uid != null;
      allow delete: if request.auth.uid == resource.data.posterId;
    }

    // Friend requests are only readable by the sender/receiver and can only be deleted by them.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      allow create: if request.auth.uid != null;
      // Allow the query from the notifications hook
      allow list: if request.auth.uid != null && request.query.where.toId == request.auth.uid;
    }

    // Matches are readable by participants, but only updatable by server-side logic (implicitly denied to clients).
    match /matches/{matchId} {
      allow read: if request.auth.uid in resource.data.participants;
      allow create: if request.auth.uid != null; // Reporting a match
      allow update: if request.auth.uid in resource.data.participants; // For confirming/declining
    }
    
    // Chats are only accessible to participants.
    match /chats/{chatId} {
      allow read, create, update: if request.auth.uid in resource.data.participantIds;
      // Allow the query from the notifications hook
      allow list: if request.auth.uid != null && request.auth.uid in request.query.where.participantIds;
    }
    
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }

    // Game collections are accessible to participants.
    match /rallyGames/{gameId} {
      allow read, update: if request.auth.uid in resource.data.participantIds;
      allow create: if request.auth.uid != null;
      // Allow the query from the notifications hook
      allow list: if request.auth.uid != null && request.auth.uid in request.query.where.participantIds;
    }
    
    match /legendGames/{gameId} {
      allow read, update: if request.auth.uid in resource.data.participantIds;
      allow create: if request.auth.uid != null;
       // Allow the query from the notifications hook
      allow list: if request.auth.uid != null && request.auth.uid in request.query.where.participantIds;
    }

    // Tournaments are readable by participants.
    match /tournaments/{tournamentId} {
        allow read, create: if request.auth.uid != null;
        allow update: if request.auth.uid == resource.data.organizerId;
    }

    // Allow authenticated users to create reports
    match /reports/{reportId} {
      allow create: if request.auth.uid != null;
    }
  }
}
