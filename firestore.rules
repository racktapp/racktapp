rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);

      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /friendRequests/{requestId} {
      // Allow individual document access if you are the sender or receiver.
      allow get, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // Allow creating a request if you are the sender.
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      // Allow LISTING requests sent TO you for the notification query.
      allow list: if isSignedIn() && request.query.toId == request.auth.uid;
    }

    match /challenges/{challengeId} {
      allow get, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow update: if isSignedIn() && isOwner(resource.data.toId);
      // Allow LISTING challenges sent TO you for the notification query.
      allow list: if isSignedIn() && request.query.toId == request.auth.uid;
    }

    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }
    
    match /matches/{matchId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow list: if isSignedIn() && request.query.participants.hasAny([request.auth.uid]);
    }

    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.participantIds.hasAny([request.auth.uid]);

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    match /tournaments/{tournamentId} {
      allow read, create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.organizerId);
    }

    match /rallyGames/{gameId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.participantIds.hasAny([request.auth.uid]);
    }
    
    match /legendGames/{gameId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.participantIds.hasAny([request.auth.uid]);
    }
    
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}
