rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Default Security: Deny all reads and writes ---
    // This is a security best practice. We will open up access
    // to specific collections below.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Users can read any profile (to see opponent info).
    // Users can only create their own profile.
    // Users can only update their own profile fields.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null; // For user search functionality
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      
      // --- User Subcollections (e.g., Practice Sessions) ---
      // Users have full control over documents in their own subcollections.
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Matches ---
    // Any participant of a match can read it.
    // Only the reporter can create it.
    // Any participant can update it (for confirmation).
    match /matches/{matchId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.participants;
      allow list: if request.auth != null && request.auth.uid == request.query.participants[0]; // Simplified for history fetching
      allow create: if request.auth.uid == request.resource.data.reportedById;
      allow update: if request.auth.uid in resource.data.participants;
    }

    // --- Friend Requests ---
    // The sender or receiver can read or delete a request.
    // Only the sender can create one.
    // This also allows the notification query to work.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId);
      allow create: if request.auth.uid == request.resource.data.fromId;
      // Allow the specific query from the notification listener.
      allow list: if request.auth != null && request.query.toId == request.auth.uid;
    }

    // --- Direct Challenges ---
    // The sender or receiver can manage the challenge.
    // This also allows the notification query to work.
    match /challenges/{challengeId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId);
      allow create: if request.auth.uid == request.resource.data.fromId;
      // Allow the specific query from the notification listener.
      allow list: if request.auth != null && request.query.toId == request.auth.uid;
    }
    
    // --- Open Challenges ---
    // Anyone can see open challenges.
    // Only the poster can create or delete their own.
    match /openChallenges/{challengeId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.posterId;
      allow delete: if request.auth.uid == resource.data.posterId;
    }

    // --- Chats ---
    // Participants can read/write to the chat and its messages.
    // This also allows the chat list and notification query to work.
    match /chats/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow list: if request.auth != null && request.auth.uid == request.query.where[0][2]; // Allows querying for user's chats

      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }

    // --- Games (Rally & Legend) ---
    // Participants can access their own games.
    // Only the current player can make a move (update).
    // This also allows the notification query to work.
    match /rallyGames/{gameId} {
      allow read, create, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid == resource.data.currentPlayerId;
      allow list: if request.auth != null && request.query.where[0][2] == request.auth.uid; // Allows querying for user's games
    }
    
    match /legendGames/{gameId} {
      allow read, create, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid == resource.data.currentPlayerId;
      allow list: if request.auth != null && request.query.where[0][2] == request.auth.uid; // Allows querying for user's games
    }

    // --- Tournaments ---
    // Anyone can view a tournament.
    // Only the organizer can create or update it.
    match /tournaments/{tournamentId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.organizerId;
      allow update: if request.auth.uid == resource.data.organizerId;
    }
    
    // --- Reports ---
    // Only the reporter can create a report.
    match /reports/{reportId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
    }
  }
}
