
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isParticipant(resource) {
      return request.auth.uid in resource.data.participantIds;
    }

    // --- Collections ---

    // Users: Can read all profiles, but only write to your own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.username == resource.data.username;
    }

    // Matches: Can read/write if you are a participant.
    // Allow listing matches you are a part of.
    match /matches/{matchId} {
      allow read, write: if isSignedIn() && isParticipant(resource);
      allow list: if isSignedIn() && request.auth.uid in query.filters.participants;
    }

    // Challenges: Can interact if you are the sender or receiver.
    match /challenges/{challengeId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if isSignedIn() && (request.auth.uid == query.filters.fromId || request.auth.uid == query.filters.toId);
    }

    // Open Challenges: Anyone can read, only owner can create/delete.
    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }

    // Friend Requests: Can interact if you are the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if isSignedIn() && (request.auth.uid == query.filters.fromId || request.auth.uid == query.filters.toId);
    }
    
    // Tournaments: Can read/write if you are a participant.
    match /tournaments/{tournamentId} {
        allow read, write: if isSignedIn() && isParticipant(resource);
        allow list: if isSignedIn() && request.auth.uid in query.filters.participantIds;
    }

    // Chats & Messages: Can read/write if you are a participant.
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && isParticipant(resource);
      allow list: if isSignedIn() && request.auth.uid in query.filters.participantIds;

      match /messages/{messageId} {
        allow read, write: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
      }
    }
    
    // Rally Games: Can read/write if you are a participant.
    match /rallyGames/{gameId} {
        allow read, write: if isSignedIn() && isParticipant(resource);
        allow list: if isSignedIn() && request.auth.uid in query.filters.participantIds;
    }

    // Legend Games: Can read/write if you are a participant.
    match /legendGames/{gameId} {
        allow read, write: if isSignedIn() && isParticipant(resource);
        allow list: if isSignedIn() && request.auth.uid in query.filters.participantIds;
    }
    
    // Practice Sessions: Can only manage your own.
    match /practiceSessions/{sessionId} {
      allow read, create, delete: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && request.auth.uid == query.filters.userId;
    }

    // Reports: Any signed-in user can create a report.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}
