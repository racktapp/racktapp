
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    // - Anyone can read public user profiles.
    // - A user can only create their own profile.
    // - A user can only update their own profile.
    // - Deleting users should be handled by a backend service/function.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Deletion should be a privileged operation
    }

    // MATCHES
    // - A user can read/list matches if they are a participant.
    // - A user can create a match if they are the reporter.
    // - A user can update a match (confirm/decline) if they are a participant.
    match /matches/{matchId} {
      allow read, list: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && isOwner(request.resource.data.reportedById);
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // CHALLENGES
    // - Users can read/list challenges they are involved in (sender or receiver).
    // - Users can create challenges.
    // - Users can update (accept/decline/cancel) challenges they are involved in.
    match /challenges/{challengeId} {
      allow read, list, create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // OPEN CHALLENGES
    // - Any authenticated user can read/list/create open challenges.
    // - A user can only delete their own open challenge.
    match /openChallenges/{challengeId} {
      allow read, list, create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }

    // FRIEND REQUESTS
    // - Users can only read/list requests where they are the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, list: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create, delete: if isAuthenticated() && (isOwner(request.resource.data.fromId) || isOwner(resource.data.toId));
    }

    // CHATS & MESSAGES
    // - A user can read/write to a chat and its messages only if they are a participant.
    match /chats/{chatId} {
      allow read, list, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // RALLY & LEGEND GAMES
    // - Users can only interact with games they are participating in or it's their turn.
     match /rallyGames/{gameId} {
      allow read, list, write, delete: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }
    match /legendGames/{gameId} {
      allow read, list, write, delete: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }

    // TOURNAMENTS
    // - Authenticated users can read/list tournaments.
    // - Only the organizer can create or update a tournament bracket.
    match /tournaments/{tournamentId} {
        allow read, list: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.organizerId);
        allow update: if isAuthenticated() && isOwner(resource.data.organizerId);
    }

    // PRACTICE SESSIONS
    // - Users can only read/write their own practice sessions.
    // - Users can query the collection only if they are filtering by their own userId.
    match /practiceSessions/{sessionId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
    }
    
    // REPORTS
    // - Any authenticated user can create a report.
    // - Reading/updating reports should be handled by an admin/moderator.
    match /reports/{reportId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.reporterId);
      allow read, update, delete: if false; 
    }
    
    // COURTS
    // - No user-based writes allowed. Data is sourced from Google Maps API.
    match /courts/{courtId} {
        allow read: if isAuthenticated();
        allow write: if false;
    }
  }
}
