rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is a participant in a document
    function isParticipant(resource) {
      return request.auth.uid in resource.data.participantIds;
    }

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
      allow create, delete: if false; // User creation handled by auth, deletion via server action

      // Users can only access their own practice sessions
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Challenges can be read by involved parties, and only updated/deleted by them.
    match /challenges/{challengeId} {
      allow read, update, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated();
    }

    // Open challenges are readable by any authenticated user, but only the poster can delete.
    match /openChallenges/{challengeId} {
      allow read, create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }

    // Matches can be read by participants, and created/updated by the system (via server actions).
    match /matches/{matchId} {
      allow read: if isAuthenticated() && isParticipant(resource);
      allow create, update: if isAuthenticated(); // Actions are controlled by server logic
    }
    
    // Friend Requests can only be accessed by the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create, update: if isAuthenticated();
    }

    // Chats and messages can only be accessed by participants.
    match /chats/{chatId} {
      allow read, create, update: if isAuthenticated() && isParticipant(resource);
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/chats/$(chatId)));
        allow update, delete: if false; // Disallow editing/deleting messages
      }
    }
    
    // Game collections (Rally & Legend) can only be accessed by participants.
    match /rallyGames/{gameId} {
      allow read, create, update, delete: if isAuthenticated() && isParticipant(resource);
    }
    
    match /legendGames/{gameId} {
      allow read, create, update, delete: if isAuthenticated() && isParticipant(resource);
    }
    
    // Tournaments can be read by participants, but only created/updated via server logic.
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated() && isParticipant(resource);
      allow create, update: if isAuthenticated(); // Actions are controlled by server logic
    }

    // User reports can only be created by an authenticated user.
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false; // Only accessible by admin/moderator roles
    }
  }
}
