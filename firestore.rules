
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isUser(userId);
      allow create: if isUser(userId);
    }

    match /matches/{matchId} {
      allow get, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.reportedById;
      allow list: if isSignedIn() && request.query.where.get('participants', 'array-contains') == request.auth.uid;
    }

    match /challenges/{challengeId} {
      allow get, update, delete: if isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
      allow list: if isSignedIn() && (request.query.where.get('fromId', '==') == request.auth.uid || request.query.where.get('toId', '==') == request.auth.uid);
    }

    match /openChallenges/{challengeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.posterId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.posterId == request.auth.uid;
    }

    match /friendRequests/{requestId} {
      allow get, delete: if isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
      allow list: if isSignedIn() && (request.query.where.get('fromId', '==') == request.auth.uid || request.query.where.get('toId', '==') == request.auth.uid);
    }
    
    match /tournaments/{tournamentId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.organizerId == request.auth.uid;
      allow list: if isSignedIn() && request.query.where.get('participantIds', 'array-contains') == request.auth.uid;
    }

    match /rallyGames/{gameId} {
      allow get, update, delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.get('participantIds', 'array-contains') == request.auth.uid;
    }

    match /legendGames/{gameId} {
      allow get, update, delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.get('participantIds', 'array-contains') == request.auth.uid;
    }

    match /chats/{chatId} {
      allow get, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.get('participantIds', 'array-contains') == request.auth.uid;
      
      match /messages/{messageId} {
        allow list, get: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow update, delete: if false;
      }
    }
  }
}
