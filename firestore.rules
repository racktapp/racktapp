
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /matches/{matchId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.reportedById;
    }

    match /friendRequests/{requestId} {
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if request.auth != null;
    }

    match /challenges/{challengeId} {
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if request.auth != null;
    }
    
    match /openChallenges/{challengeId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && request.auth.uid == request.resource.data.posterId;
    }

    match /tournaments/{tournamentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.organizerId;
        allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }

    match /chats/{chatId} {
        allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

        match /messages/{messageId} {
            allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        }
    }

    match /rallyGames/{gameId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow list: if request.auth != null && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }

    match /legendGames/{gameId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow list: if request.auth != null && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }

    match /practiceSessions/{sessionId} {
      // Allow a user to query for their own sessions.
      // The query from the client MUST include a where("userId", "==", request.auth.uid) clause.
      allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
      
      // Allow a user to get, update, and delete their own sessions.
      allow get, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow a user to create a session, but only for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /reports/{reportId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
    }
  }
}
