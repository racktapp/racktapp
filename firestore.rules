rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(resource) {
      return request.auth.uid in resource.data.participantIds;
    }

    // Default Deny
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isOwner(userId)
                    && request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl'])
                    && request.resource.data.username is string
                    && request.resource.data.username.size() > 2
                    && request.resource.data.preferredSports is list;
    }
    
    // Practice Sessions Subcollection
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, create: if isOwner(userId);
    }
    
    // Matches Collection
    match /matches/{matchId} {
      // Allow any participant to read a match document
      allow read: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
      
      // Allow creating a match if the reporter is one of the participants
      allow create: if isSignedIn() && request.resource.data.reportedById == request.auth.uid;
      
      // Allow a participant to confirm or decline
      allow update: if isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
    }
    
    // Challenges Collections
    match /challenges/{challengeId} {
      allow read, update, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
    }

    match /openChallenges/{challengeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.posterId == request.auth.uid;
      allow delete: if isOwner(resource.data.posterId);
    }
    
    // Friend Requests Collection
    match /friendRequests/{requestId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
    }
    
    // Tournaments Collection
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn() && isParticipant(resource);
      allow create: if isSignedIn() && request.resource.data.organizerId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.organizerId;
    }

    // Reports Collection
    match /reports/{reportId} {
      allow create: if isSignedIn() && request.resource.data.reporterId == request.auth.uid;
    }
    
    // Game Collections
    match /rallyGames/{gameId} {
        allow read, update, delete: if isSignedIn() && isParticipant(resource);
    }
    
    match /legendGames/{gameId} {
        allow read, update, delete: if isSignedIn() && isParticipant(resource);
    }
    
    // Chat collection and Messages subcollection
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && isParticipant(resource);
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
  }
}
