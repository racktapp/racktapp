rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can be read by anyone, but only the owner can write.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
      
      // Practice sessions can only be accessed by the owner of the user document.
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Reports can only be created by authenticated users. (Admin access for read/update/delete)
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, write, delete: if false; // Should be handled by admin/backend
    }

    // Pending matches can be read by participants, and written to until confirmed/declined.
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create; // Created via a server action
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants && resource.data.status == 'pending';
      allow delete: if false; // Matches are declined, not deleted.
    }

    // Challenges can be managed by the sender or receiver.
    match /challenges/{challengeId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create; // Created via a server action
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.fromId;
    }

    // Open challenges are public to read, but only the poster can delete them.
    match /openChallenges/{challengeId} {
      allow read;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }
    
    // Friend requests are only visible to the sender and receiver.
    match /friendRequests/{requestId} {
       allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
       allow create: if isAuthenticated();
    }

    // Chats and messages can only be accessed by participants.
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow create: if isAuthenticated() && isOwner(request.resource.data.senderId);
      }
    }
    
    // Tournaments are readable by participants, but only updatable by the organizer.
    match /tournaments/{tournamentId} {
        allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(resource.data.organizerId);
    }
    
    // Rally Games can only be accessed by participants.
    match /rallyGames/{gameId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    // Legend Games can only be accessed by participants.
    match /legendGames/{gameId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Explicitly allow list queries used by the application's real-time listeners.
    match /chats/{chatId} {
        // This is separate from the document rule above to allow the collection query.
        allow list: if isAuthenticated();
    }
     match /challenges/{challengeId} {
        allow list: if isAuthenticated();
    }
     match /friendRequests/{requestId} {
        allow list: if isAuthenticated();
    }
     match /rallyGames/{gameId} {
        allow list: if isAuthenticated();
    }
     match /legendGames/{gameId} {
        allow list: if isAuthenticated();
    }
  }
}