
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USER PROFILES
    // - Anyone can read public user profiles.
    // - A user can only create their own profile.
    // - A user can only update their own profile, and cannot change protected fields like stats.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && 
                       !('sports' in request.resource.data) && 
                       !('email' in request.resource.data);
      allow delete: if isOwner(userId);
    }
    
    // CHALLENGES & FRIEND REQUESTS
    // - Users can read/write requests where they are the sender or receiver.
    // - Users can list requests sent to them.
    match /challenges/{challengeId} {
      allow read, write: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if isSignedIn() && request.query.where.toId == request.auth.uid;
    }
    match /friendRequests/{requestId} {
      allow read, write, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow list: if isSignedIn() && request.query.where.toId == request.auth.uid;
    }

    // OPEN CHALLENGES
    // - Any signed-in user can read the list of open challenges.
    // - A user can only create/delete their own open challenges.
    match /openChallenges/{challengeId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.posterId);
      allow delete: if isOwner(resource.data.posterId);
    }
    
    // PRACTICE SESSIONS
    // - Users can only CRUD their own practice sessions.
    match /practiceSessions/{sessionId} {
      allow read, write, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if isSignedIn() && request.query.where.userId == request.auth.uid;
    }
    
    // REPORTS
    // - Any signed-in user can create a report.
    // - Only admins (not implemented, so effectively no one) can read/write.
    match /reports/{reportId} {
        allow create: if isSignedIn();
        allow read, write, delete: if false; // To be implemented with admin roles
    }

    // --- Collections with participantIds array ---
    // General rule for collections that store participants in an array.
    // This covers matches, tournaments, chats, rallyGames, and legendGames.
    // - List: Can query if your UID is in the participantIds array. THIS IS THE KEY FIX.
    // - Read/Write: Can access a specific document if you are a participant.
    match /{collection}/{docId}
      where collection in ['matches', 'tournaments', 'chats', 'rallyGames', 'legendGames'] {
        allow list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/$(collection)/$(docId)).data.participantIds;
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    // Sub-collection for chat messages.
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
    }
  }
}
