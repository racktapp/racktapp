rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Utility Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profiles ---
    // Users can read any profile (for leaderboards, friend searches, etc.)
    // Users can only create, update, or delete their own profile document.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwner(userId);
      
      // Practice sessions are private to the user.
      match /practiceSessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // --- Friend Requests ---
    // This rule exactly matches the queries in use-notifications.ts and friends/page.tsx
    // by checking if the user is the recipient (toId) or the sender (fromId).
    match /friendRequests/{requestId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
    }

    // --- Challenges ---
    // This rule allows a user to read a challenge if they are the recipient OR the sender.
    match /challenges/{challengeId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.toId; // Only recipient can accept/decline
    }
    
    // --- Open Challenges ---
    // Any signed-in user can read all open challenges.
    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }

    // --- Matches, Chats, Games ---
    // These collections use a simple, robust rule: a user can access the document
    // if their UID is in the `participantIds` array. This is secure and efficient.
    match /matches/{matchId} {
      allow read, create, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    match /rallyGames/{gameId} {
      allow read, create, update, delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
      allow read, create, update, delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;
    }

    // --- Tournaments ---
    // Any signed-in user can read any tournament (for public brackets).
    // The organizer is the only one who can update it (e.g., report winners).
    match /tournaments/{tournamentId} {
      allow read, create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.organizerId);
    }
    
    // --- Reports ---
    // Any signed-in user can create a report.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}