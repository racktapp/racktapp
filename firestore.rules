rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read their own document, but can read anyone's basic profile info for display.
    // They can only update their own profile information.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Reports can only be created. No one can read or delete them through the client.
    match /reports/{reportId} {
        allow create: if request.auth != null && request.resource.data.reporterId == request.auth.uid;
        allow read, update, delete: if false;
    }

    // Friend requests can be read if you are the sender or receiver.
    // You can create a request if you are the sender.
    // You can delete a request (cancel/decline) if you are the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
      allow update: if false; // Updates happen via transactions in a server action
    }

    // Challenges can be read by sender/receiver. Can be created by sender.
    // Can be updated (accept/decline/cancel) by either party.
    match /challenges/{challengeId} {
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
        allow delete: if false;
    }

    // Open challenges can be read by any authenticated user.
    // They can only be created or deleted by the user who posted them.
    match /openChallenges/{challengeId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == resource.data.posterId;
        allow update: if false;
    }
    
    // Matches can be read by any participant.
    // They can be created by a participant.
    // They can be updated by a participant (confirm/decline).
    match /matches/{matchId} {
        allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participants;
        allow delete: if false;
    }
    
    // Chats and their subcollections (messages) can only be accessed by participants.
    match /chats/{chatId} {
        allow read, update, create: if request.auth.uid in resource.data.participantIds;
        allow delete: if false;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
            allow update, delete: if false;
        }
    }
    
    // Game collections can only be accessed by participants.
    match /rallyGames/{gameId} {
        allow read, update, create: if request.auth.uid in resource.data.participantIds;
        allow delete: if request.auth.uid in resource.data.participantIds;
    }
    
    match /legendGames/{gameId} {
        allow read, update, create: if request.auth.uid in resource.data.participantIds;
        allow delete: if request.auth.uid in resource.data.participantIds;
    }
    
    // Tournaments can be read by participants.
    // Can be created by organizer. Can be updated (report winner) by organizer.
    match /tournaments/{tournamentId} {
        allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
        allow create: if request.auth.uid == request.resource.data.organizerId;
        allow update: if request.auth.uid == resource.data.organizerId;
        allow delete: if false;
    }

    // Practice sessions are private to the user who created them.
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, create, delete: if request.auth != null && request.auth.uid == userId;
      allow update: if false;
    }
  }
}