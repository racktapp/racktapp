rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access to prevent unauthorized operations.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Users can read any public profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    // --- Practice Sessions (Subcollection) ---
    // Users can only manage their own practice sessions.
    match /users/{userId}/practiceSessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- Friend Requests ---
    // Allow read/write only if the user is the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null;
    }

    // --- Challenges (Direct) ---
    // Allow read/write only if the user is the sender or receiver.
    match /challenges/{challengeId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null;
    }

    // --- Open Challenges ---
    // Allow any authenticated user to read/list.
    // Allow creation for any authenticated user.
    // Allow deletion only for the user who posted it.
    match /openChallenges/{challengeId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.posterId;
    }

    // --- Matches ---
    // Allow read if a participant.
    // Allow creation for any authenticated user (validation is in server logic).
    // Allow update (confirm/decline) if a participant.
    match /matches/{matchId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
    }

    // --- Tournaments ---
    // Allow any authenticated user to read/list.
    // Allow creation for any authenticated user.
    // Allow update only by the organizer.
    match /tournaments/{tournamentId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
    }

    // --- Chats ---
    // Allow read/write on a chat document if the user is a participant.
    match /chats/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }

    // --- Chat Messages (Subcollection) ---
    // Allow read if a participant in the parent chat.
    // Allow create if the sender is the authenticated user.
    match /chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
    }

    // --- Games (Rally & Legend) ---
    // Generic rule for game collections.
    // Allow read/update if the user is a participant.
    // Allow creation for any authenticated user (server logic handles validation).
    match /{gameCollection}/{gameId} where gameCollection in ['rallyGames', 'legendGames'] {
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null;
    }

    // --- User Reports ---
    // Only allow creation. Reports should be read/managed by an admin process, not by users.
    match /reports/{reportId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
    }
  }
}
