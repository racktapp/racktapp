rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Anyone can read a user's public profile data.
      allow read: if request.auth != null;
      
      // Users can only create their own profile document.
      allow create: if request.auth.uid == userId;

      // Users can only update their own profile, and only specific fields.
      allow update: if request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['username', 'preferredSports', 'avatarUrl', 'flexedAchievementId']);
    }

    // --- Matches ---
    match /matches/{matchId} {
      // Only participants can read a match document.
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Only authenticated users can create a new match report (pending match).
      allow create: if request.auth != null;
      
      // Participants can confirm or decline a match.
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
    }
    
    // --- Challenges & Friend Requests ---
    match /challenges/{challengeId} {
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null;
    }
    
    match /openChallenges/{challengeId} {
      // Anyone authenticated can read open challenges.
      allow read: if request.auth != null;
      // Only the poster can create or delete their open challenge.
      allow create, delete: if request.auth != null && request.resource.data.posterId == request.auth.uid;
    }

    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create, delete: if request.auth != null;
    }
    
    // --- Chat ---
    match /chats/{chatId} {
      // Participants can read, create, and update chats.
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      // Participants can read and write messages in their chats.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    // --- Games ---
    function isGameParticipant(gameDoc) {
      return request.auth != null && request.auth.uid in gameDoc.data.participantIds;
    }

    match /rallyGames/{gameId} {
      allow read, create, update, delete: if isGameParticipant(resource);
    }
    
    match /legendGames/{gameId} {
      allow read, create, update, delete: if isGameParticipant(resource);
    }
    
    // --- Tournaments ---
    match /tournaments/{tournamentId} {
      // Allow any authenticated user to read a tournament bracket.
      allow read: if request.auth != null;
      
      // Only the organizer can update the tournament (report winners).
      allow update: if request.auth != null && request.auth.uid == resource.data.organizerId;
      
      // Any authenticated user can create a tournament.
      allow create: if request.auth != null;
    }

    // --- Practice Sessions ---
    match /practiceSessions/{sessionId} {
      // Users can only interact with their own practice sessions.
      allow read, create, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // --- User Reports ---
    match /reports/{reportId} {
        // Only allow users to create reports. Review will be done via Admin SDK.
        allow create: if request.auth != null && request.resource.data.reporterId == request.auth.uid;
    }
  }
}
