
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is a participant in a document
    function isParticipant(docId, collectionName) {
        return request.auth.uid in get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.participantIds;
    }

    // Users can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false;
    }

    // Participants can read matches. Authenticated users can create.
    // Participants can update (e.g., confirm).
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reportedById;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participantsToConfirm;
      allow delete: if false;
    }
    
    // Sender/receiver can read/delete friend requests. Sender can create.
    match /friendRequests/{requestId} {
        allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
        allow update: if false;
    }

    // Sender/receiver can read/update direct challenges. Sender can create.
    match /challenges/{challengeId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
        allow update: if isAuthenticated() && 
                        ( (request.auth.uid == resource.data.toId && request.resource.data.status in ['accepted', 'declined']) || 
                          (request.auth.uid == resource.data.fromId && request.resource.data.status == 'cancelled') );
        allow delete: if false;
    }
    
    // Authenticated users can read open challenges. Poster can create/delete.
    match /openChallenges/{challengeId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.posterId;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
        allow update: if false;
    }

    // Participants can read tournaments. Organizer can create/update.
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.organizerId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
      allow delete: if false;
    }
    
    // Participants can read/update chats.
    match /chats/{chatId} {
        allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
        allow delete: if false; // Don't allow chat deletion for now

        // Messages subcollection
        match /messages/{messageId} {
            allow read: if isAuthenticated() && isParticipant(chatId, 'chats');
            allow create: if isAuthenticated() && isParticipant(chatId, 'chats') && request.auth.uid == request.resource.data.senderId;
            allow update, delete: if false;
        }
    }
    
    // Participants can read/update/delete games.
    match /rallyGames/{gameId} {
        allow read, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
    }
    
    // Participants can read/update/delete games.
    match /legendGames/{gameId} {
        allow read, update, delete: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
    }
  }
}
