rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read anyone's public profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == userId;

      // Allow users to list and manage their own practice sessions.
      match /practiceSessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Allow authenticated users to read and query the leaderboard.
    match /users/{userId} {
      allow list: if request.auth != null;
    }

    // Matches can be created by any authenticated user.
    // They can only be read if the requesting user was a participant.
    // Updates (confirm/decline) can only happen if the user is a participant.
    match /matches/{matchId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
    }

    // Authenticated users can manage friend requests sent to or from them.
    match /friendRequests/{requestId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Challenges can be created by authenticated users.
    // They can be read or updated by either the sender or receiver.
    match /challenges/{challengeId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // Open challenges can be read by anyone authenticated.
    // They can only be created or deleted by the user who posted them.
    match /openChallenges/{challengeId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.posterId;
    }

    // Chats can be read and updated by participants. Messages can be created by participants.
    match /chats/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      match /messages/{messageId} {
        allow create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // Tournaments can be read by any authenticated user.
    // They can only be created or updated by the organizer.
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.organizerId;
    }

    // Games (both types) can be managed by participants.
    match /rallyGames/{gameId} {
      allow read, update, create, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    match /legendGames/{gameId} {
      allow read, update, create, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    // Allow creation of reports by any authenticated user.
    match /reports/{reportId} {
        allow create: if request.auth != null;
    }

  }
}
