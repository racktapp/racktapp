rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is a participant in a document (game, chat, match).
    function isParticipant() {
      return isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Users can be read by anyone, but only the owner can write to their own document.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
      
      // Users can only read/write their own practice sessions.
      match /practiceSessions/{sessionId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Matches can be read by participants. Creation is handled by server-side actions.
    // Updates (confirm/decline) are allowed by participants.
    match /matches/{matchId} {
      allow read: if isParticipant();
      allow create: if isAuthenticated();
      allow update: if isParticipant();
      allow delete: if false;
    }
    
    // Challenges can be read by either sender or receiver.
    // Updates/deletes are also restricted to sender/receiver.
    match /challenges/{challengeId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
        allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Open challenges can be read by any authenticated user.
    // Only the poster can create or delete their own open challenge.
    match /openChallenges/{challengeId} {
      allow read, create: if isAuthenticated();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.posterId;
    }

    // Friend requests can be read by sender/receiver.
    // Deletion can be done by either party.
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Chats and their subcollections can be accessed only by participants.
    match /chats/{chatId} {
      allow read, update, delete: if isParticipant();
      allow create: if isAuthenticated();
      
      match /messages/{messageId} {
        allow read: if isParticipant();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // Rally Games can only be accessed by participants.
    match /rallyGames/{gameId} {
        allow read, update: if isParticipant();
        allow create: if isAuthenticated();
        allow delete: if isParticipant();
    }
    
    // Legend Games can only be accessed by participants.
    match /legendGames/{gameId} {
        allow read, update: if isParticipant();
        allow create: if isAuthenticated();
        allow delete: if isParticipant();
    }
    
    // Tournaments can be read by participants.
    // Creation/updates are handled by server-side actions.
    match /tournaments/{tournamentId} {
        allow read: if isParticipant();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.organizerId;
    }
    
    // Reports can only be created by an authenticated user.
    // No one can read/update/delete them directly.
    match /reports/{reportId} {
      allow read, update, delete: if false;
      allow create: if isAuthenticated();
    }
  }
}