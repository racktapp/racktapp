rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }
    
    function isFromOrTo() {
      return request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }

    // --- Default Deny All ---
    match /{document=**} {
      allow read, write: if false;
    }

    // --- User Profiles ---
    // Anyone can read a user's profile.
    // Only the user can create or update their own profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    // --- Friend Requests ---
    // Can only be read by the sender or receiver.
    // Can only be created if the sender is the current user.
    // Can only be deleted by the sender or receiver.
    match /friendRequests/{requestId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }
    
    // --- Challenges (Direct) ---
    // Can only be read/updated by the sender or receiver.
    // Can only be created if the sender is the current user.
    match /challenges/{challengeId} {
      allow read, update: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }
    
    // --- Open Challenges (Public) ---
    // Anyone authenticated can read.
    // Only the poster can create or delete their own.
    match /openChallenges/{challengeId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && isOwner(request.resource.data.posterId);
        allow delete: if isSignedIn() && isOwner(resource.data.posterId);
    }
    
    // --- Matches ---
    // Can only be read or updated by a participant.
    // Can only be created if the reporter is a participant.
    match /matches/{matchId} {
        allow read, update: if isSignedIn() && isParticipant();
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
    }

    // --- Chats & Messages ---
    // Chat documents and the messages subcollection can only be accessed by participants.
    match /chats/{chatId} {
      allow get, list, update: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && isParticipant();
      }
    }
    
    // --- Games (Rally & Legend) ---
    // Can be read, created, or updated only by participants.
    match /rallyGames/{gameId} {
      allow read, update: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow delete: if isSignedIn() && isParticipant();
    }
    
    match /legendGames/{gameId} {
      allow read, update: if isSignedIn() && isParticipant();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      allow delete: if isSignedIn() && isParticipant();
    }
    
    // --- Tournaments ---
    // Can be read by any participant.
    // Can only be created/updated by the organizer.
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn() && isParticipant();
      allow create, update: if isSignedIn() && isOwner(request.resource.data.organizerId);
    }
    
    // --- Practice Sessions & Reports ---
    // Can only be read/written by the owner.
    match /practiceSessions/{sessionId} {
      allow read, create, update, delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /reports/{reportId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.reporterId);
    }
  }
}
