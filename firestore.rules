rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    //
    // Functions
    //
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.friendIds.hasAny([request.auth.uid]);
    }
    
    function isParticipant(participants) {
      return isSignedIn() && request.auth.uid in participants;
    }
    
    function getGameParticipants(gamePath) {
        return get(gamePath).data.participantIds;
    }

    //
    // User Profile Rules
    //
    match /users/{userId} {
      // Anyone can read a user's profile
      allow read: if true;
      
      // Only the user themselves can update their profile or delete it
      allow update, delete: if isUser(userId);

      // Rules for practiceSessions subcollection
      match /practiceSessions/{sessionId} {
        allow read, write, create, delete: if isUser(userId);
      }
    }
    
    //
    // Friend Request Rules
    //
    match /friendRequests/{requestId} {
      // Allow read/delete only by the sender or receiver
      allow read, delete: if isSignedIn() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
      
      // Allow creation by the sender
      allow create: if isSignedIn() && isUser(request.resource.data.fromId);
    }
    
    //
    // Challenge Rules
    //
    match /challenges/{challengeId} {
      allow read, update: if isSignedIn() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
      allow create: if isSignedIn() && isUser(request.resource.data.fromId);
    }
    
    match /openChallenges/{challengeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isUser(request.resource.data.posterId);
      allow delete: if isSignedIn() && isUser(resource.data.posterId);
    }

    //
    // Match History Rules
    //
    match /matches/{matchId} {
      // Allow reads and updates (confirm/decline) only by participants
      allow read, update: if isParticipant(resource.data.participants);
      // Allow creation by any signed-in user, as it's validated in the action
      allow create: if isSignedIn();
    }
    
    //
    // Chat Rules
    //
    match /chats/{chatId} {
        // Allow chat actions only if the user is a participant
        allow read, update, delete: if isParticipant(resource.data.participantIds);
        allow create: if isParticipant(request.resource.data.participantIds);

        // Allow actions on messages only if user is a participant of the parent chat
        match /messages/{messageId} {
            allow read: if isParticipant(getGameParticipants(/databases/$(database)/documents/chats/$(chatId)));
            allow create: if isUser(request.resource.data.senderId) && isParticipant(getGameParticipants(/databases/$(database)/documents/chats/$(chatId)));
        }
    }
    
    //
    // Game Rules (Rally & Legend)
    //
    match /rallyGames/{gameId} {
      allow read, update, delete: if isParticipant(resource.data.participantIds);
      allow create: if isParticipant(request.resource.data.participantIds);
    }
    
    match /legendGames/{gameId} {
       allow read, update, delete: if isParticipant(resource.data.participantIds);
       allow create: if isParticipant(request.resource.data.participantIds);
    }
    
    //
    // Tournament Rules
    //
    match /tournaments/{tournamentId} {
      // Any signed-in user can view a tournament
      allow read: if isSignedIn();
      // Only the organizer can create/update it
      allow create: if isUser(request.resource.data.organizerId);
      allow update: if isUser(resource.data.organizerId);
    }

    //
    // Report Rules
    //
    match /reports/{reportId} {
      // Only signed-in users can create a report
      allow create: if isUser(request.resource.data.reporterId);
    }
  }
}