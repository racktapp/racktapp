rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Deletion should be a privileged operation
    }

    // MATCHES
    match /matches/{matchId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && isOwner(request.resource.data.reportedById);
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // CHALLENGES
    match /challenges/{challengeId} {
      allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
    }

    // OPEN CHALLENGES
    match /openChallenges/{challengeId} {
      allow read, create: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.posterId);
    }

    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      allow read, delete: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      // Allow creation only by the sender
      allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
      // Allow update only by the receiver (to accept/decline)
      allow update: if isAuthenticated() && isOwner(resource.data.toId);
    }

    // CHATS & MESSAGES
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }

    // GAMES
    match /rallyGames/{gameId} {
       allow read, write, delete: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }
    match /legendGames/{gameId} {
      allow read, write, delete: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || request.auth.uid == resource.data.currentPlayerId);
    }
    
    // TOURNAMENTS
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.organizerId);
      allow update: if isAuthenticated() && isOwner(resource.data.organizerId);
    }

    // PRACTICE SESSIONS
    match /practiceSessions/{sessionId} {
      // Allow a user to query for their own sessions.
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
      // Allow a user to get, create, update, and delete their own sessions.
      allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // REPORTS
    match /reports/{reportId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.reporterId);
      allow read, update, delete: if false; // Admin/moderator only
    }

    // COURTS
    match /courts/{courtId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
}
