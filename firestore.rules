rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Profiles ---
    // Users can read any profile for leaderboards, search, etc.
    // Users can only write to their own document.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);

      // Practice sessions are private to the user.
      match /practiceSessions/{sessionId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }

    // --- Friend Requests & Challenges ---
    // Rules must match the queries in use-notifications.ts exactly.
    // The query is `where('toId', '==', user.uid)`, so the rule must check that.
    match /friendRequests/{requestId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
      allow list: if isSignedIn() && request.query.where.toId == request.auth.uid;
    }
    
    match /challenges/{challengeId} {
      allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.toId;
      allow list: if isSignedIn() && request.query.where.toId == request.auth.uid;
    }

    // --- Open Challenges ---
    // Anyone can read open challenges based on the sport.
    match /openChallenges/{challengeId} {
      allow read, create: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.posterId);
      allow list: if isSignedIn();
    }
    
    // --- Rules for collections queried with 'array-contains' ---
    // The rule must check the 'participantIds' field directly.
    match /matches/{matchId} {
      allow read, update, create: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow list: if isSignedIn() && request.auth.uid in request.query.where.participants;
    }
    
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.participantIds.hasAny([request.auth.uid]);
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    match /rallyGames/{gameId} {
      allow read, update, delete, create: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.participantIds.hasAny([request.auth.uid]);
    }
    
    match /legendGames/{gameId} {
      allow read, update, delete, create: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.query.where.participantIds.hasAny([request.auth.uid]);
    }

    match /tournaments/{tournamentId} {
      allow read, create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.organizerId);
      allow list: if isSignedIn() && request.query.where.participantIds.hasAny([request.auth.uid]);
    }
    
    // --- Reports ---
    // Any signed-in user can create a report.
    match /reports/{reportId} {
      allow create: if isSignedIn();
    }
  }
}
