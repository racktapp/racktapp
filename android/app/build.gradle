// DO NOT EDIT THIS FILE!
// This is an autogenerated file.
// Changes to this file will be lost when you "sync" your project.
// If you want to change something, change it in your name.revel.build.json file.
// The file will be regenerated on the next build.
apply from: "../../../node_modules/name.revel.build/android/build.gradle"


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project which relies on publishing state which isn't available in the Gradle writing guide.
 * The publishing state is generated by the build-logic project.
 */
import com.android.build.api.instrumentation.AsmClassVisitorFactory
import com.android.build.api.instrumentation.ClassContext
import com.android.build.api.instrumentation.ClassData
import com.android.build.api.instrumentation.FramesComputationMode
import com.android.build.api.instrumentation.InstrumentationParameters
import com.android.build.api.instrumentation.InstrumentationScope
import com.android.build.api.variant.AndroidComponentsExtension
import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input

// If you are developing a plugin, you can useful information in the Main App's build.gradle file
// For example, you can get the package name of the app from the defaultConfig.applicationId property
//
// You can also get the version name and version code from the defaultConfig.versionName and defaultConfig.versionCode properties
//
// You can also get the signing config from the signingConfigs property
//
// You can also get the build types from the buildTypes property
//
// You can also get the product flavors from the productFlavors property
//
// You can also get the test options from the testOptions property
//
// You can also get the dependencies from the dependencies property
//
// You can also get the compile options from the compileOptions property
//
// You can also get the packaging options from the packagingOptions property
//
// You can also get the jacoco options from the jacoco property
//
// You can also get the lint options from the lintOptions property
//
// You can also get the dex options from the dexOptions property
//
// You can also get the aapt options from the aaptOptions property
//
// You can also get the adb options from the adbOptions property
//
// You can also get the source sets from the sourceSets property
//
// You can also get the test source sets from the testSourceSets property
//
// You can also get the aidl source sets from the aidlSourceSets property
//
// You can also get the renderscript source sets from the renderscriptSourceSets property
//
// You can also get the jni libs source sets from the jniLibsSourceSets property
//
// You can also get the res source sets from the resSourceSets property
//
// You can also get the assets source sets from the assetsSourceSets property
//
// You can also get the manifests source sets from the manifestsSourceSets property
//

apply from: '../../node_modules/@capacitor/cordova-android-plugins/src/cordova.variables.gradle'
// If you have a file called `variables.gradle` in your project's root, it will be imported as a gradle script.
// It can be used to set properties in the project, such as the signing config.
def variables_gradle = new File(project.projectDir, 'variables.gradle')
if (variables_gradle.exists()) {
    apply from: 'variables.gradle'
}

android {
    namespace "com.google.android.apps.playconsole"
    defaultConfig {
        applicationId "com.google.android.apps.playconsole"
        minSdkVersion 22
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // You can use the signing config from the variables.gradle file.
        // For example, if you have the following in your variables.gradle file:
        //
        // ext {
        //     signing_config = [
        //         storeFile: file('my.keystore'),
        //         storePassword: 'password',
        //         keyAlias: 'my_alias',
        //         keyPassword: 'password'
        //     ]
        // }
        //
        // You can use it in your build.gradle file like this:
        //
        // signingConfig signingConfigs.create('release')
        // signingConfig.initWith(project.ext.signing_config)
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // You can use the signing config from the variables.gradle file.
            // For example, if you have the following in your variables.gradle file:
            //
            // ext {
            //     signing_config = [
            //         storeFile: file('my.keystore'),
            //         storePassword: 'password',
            //         keyAlias: 'my_alias',
            //         keyPassword: 'password'
            //     ]
            // }
            //
            // You can use it in your build.gradle file like this:
            //
            // signingConfig signingConfigs.create('release')
            // signingConfig.initWith(project.ext.signing_config)
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    implementation "androidx.core:core-splashscreen:1.0.0"
    implementation "androidx.webkit:webkit:1.4.0"
    implementation "com.google.android.material:material:1.5.0"
    implementation "com.google.android.play:core:1.10.3"
    implementation "com.google.firebase:firebase-analytics:19.0.2"
    implementation "com.google.firebase:firebase-auth:21.0.1"
    implementation "com.google.firebase:firebase-crashlytics:18.2.1"
    implementation "com.google.firebase:firebase-messaging:22.0.7"
    implementation "com.google.firebase:firebase-perf:20.0.3"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
    implementation project(':capacitor-android')
}

val androidComponents = project.extensions.getByType(AndroidComponentsExtension::class.java)
androidComponents.onVariants { variant ->
    variant.instrumentation.transformClassesWith(
        ExampleInstrumentingArtifactTransform,
        InstrumentationScope.ALL
    ) {
        it.invalidate.set(System.currentTimeMillis())
    }
    variant.instrumentation.setAsmFramesComputationMode(FramesComputationMode.COPY_FRAMES)
}

if (project.hasProperty('postBuildExtras')) {
    postBuildExtras()
}



